[{"/Users/pasanmadushan/Desktop/Front-end-react/src/index.js":"1","/Users/pasanmadushan/Desktop/Front-end-react/src/App.js":"2","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/Home.js":"3","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CustomerDashboard.js":"4","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CustomerAdress.js":"5","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/ChangePersonalDet.js":"6","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CardDetails.js":"7","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/AllOrders.js":"8","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/TrackOrder.js":"9","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/SpecficProductPage.js":"10","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CategoryPage.js":"11","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/FeedbackPage.js":"12","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CartPage.js":"13","/Users/pasanmadushan/Desktop/Front-end-react/src/components/Navbar.js":"14","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/SellerDashboard.js":"15","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ShipAddressses.js":"16","/Users/pasanmadushan/Desktop/Front-end-react/src/components/CustomerDashSideBar.js":"17","/Users/pasanmadushan/Desktop/Front-end-react/src/components/AddAddress.js":"18","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ChangePasswordForm.js":"19","/Users/pasanmadushan/Desktop/Front-end-react/src/components/BankCards.js":"20","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ChangePersonalDetForm.js":"21","/Users/pasanmadushan/Desktop/Front-end-react/src/components/OrderTiles.js":"22","/Users/pasanmadushan/Desktop/Front-end-react/src/components/AddBankCard.js":"23","/Users/pasanmadushan/Desktop/Front-end-react/src/components/CategorizedReviewPreview.js":"24","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ReviewCountPreview.js":"25","/Users/pasanmadushan/Desktop/Front-end-react/src/components/SearchBar.js":"26","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ProductCard.js":"27","/Users/pasanmadushan/Desktop/Front-end-react/src/components/BankCard.js":"28","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ShipAddress.js":"29","/Users/pasanmadushan/Desktop/Front-end-react/src/components/OrderTile.js":"30","/Users/pasanmadushan/Desktop/Front-end-react/src/components/Replys.js":"31"},{"size":319,"mtime":1613760098320,"results":"32","hashOfConfig":"33"},{"size":1821,"mtime":1613760098312,"results":"34","hashOfConfig":"33"},{"size":110,"mtime":1613760098324,"results":"35","hashOfConfig":"33"},{"size":7760,"mtime":1613760098324,"results":"36","hashOfConfig":"33"},{"size":7646,"mtime":1613760098323,"results":"37","hashOfConfig":"33"},{"size":2736,"mtime":1613760098322,"results":"38","hashOfConfig":"33"},{"size":6194,"mtime":1613760098321,"results":"39","hashOfConfig":"33"},{"size":7973,"mtime":1612895989634,"results":"40","hashOfConfig":"33"},{"size":1674,"mtime":1612895989640,"results":"41","hashOfConfig":"33"},{"size":8100,"mtime":1612896007886,"results":"42","hashOfConfig":"33"},{"size":5304,"mtime":1613760098322,"results":"43","hashOfConfig":"33"},{"size":6599,"mtime":1613760098324,"results":"44","hashOfConfig":"33"},{"size":3282,"mtime":1613760098321,"results":"45","hashOfConfig":"33"},{"size":3314,"mtime":1613760098317,"results":"46","hashOfConfig":"33"},{"size":2684,"mtime":1612896007885,"results":"47","hashOfConfig":"33"},{"size":433,"mtime":1613760098319,"results":"48","hashOfConfig":"33"},{"size":1812,"mtime":1612895989630,"results":"49","hashOfConfig":"33"},{"size":2433,"mtime":1613760098312,"results":"50","hashOfConfig":"33"},{"size":4231,"mtime":1613760098316,"results":"51","hashOfConfig":"33"},{"size":343,"mtime":1613760098314,"results":"52","hashOfConfig":"33"},{"size":4671,"mtime":1613760098317,"results":"53","hashOfConfig":"33"},{"size":392,"mtime":1612895989632,"results":"54","hashOfConfig":"33"},{"size":2717,"mtime":1613760098313,"results":"55","hashOfConfig":"33"},{"size":1754,"mtime":1612065915510,"results":"56","hashOfConfig":"33"},{"size":2278,"mtime":1612065915511,"results":"57","hashOfConfig":"33"},{"size":599,"mtime":1612503070407,"results":"58","hashOfConfig":"33"},{"size":1916,"mtime":1613760098318,"results":"59","hashOfConfig":"33"},{"size":4278,"mtime":1613760098313,"results":"60","hashOfConfig":"33"},{"size":8498,"mtime":1613760098319,"results":"61","hashOfConfig":"33"},{"size":5406,"mtime":1612895989631,"results":"62","hashOfConfig":"33"},{"size":880,"mtime":1612896007884,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13dxzxw",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"68"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"68"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"68"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"68"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"68"},"/Users/pasanmadushan/Desktop/Front-end-react/src/index.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/App.js",[],["149","150"],"/Users/pasanmadushan/Desktop/Front-end-react/src/pages/Home.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CustomerDashboard.js",["151","152","153","154","155"],"import {\n    Box,\n    Grid,\n    GridItem, \n    Avatar,\n    Divider,\n    Heading,\n    SimpleGrid,\n    Text,\n    useColorMode,\n    useToast\n  } from \"@chakra-ui/react\";\n\nimport React, { useState,useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Navbar from '../components/Navbar';\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\nimport Axios from 'axios'\n\n\nconst CustomerDashboard = () => {\n\n    const toast = useToast()\n\n    const [userdata, setUserdata] = useState([])\n    const [orderNum, setOrderNum] = useState([])\n        \n    useEffect(() => {\n        Axios.get(\"http://localhost:5000/customer/user\")\n        .then((Response)=>{\n            console.log(Response.data.user[0]);\n            // console.log(Response.data.det);\n            setUserdata(Response.data.user[0]);\n            const det = arrangeData(Response.data.det)\n            setOrderNum(det);\n            \n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Loading Error\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          }); \n    }, [])\n\n\n\n    const arrangeData = (data)=>{\n        var newdata = {\n            \"Shipped\":0,\n            \"Preparing\":0,\n            \"Awaiting_Cancel\":0,\n            \"Cancelled\":0,\n            \"Delivered\":0\n        }\n        for(var i=0;i<data.length;i++){\n          if(data[i].Order_status ===\"Shipped\"){\n              newdata.Shipped+=1;\n          }\n          else if (data[i].Order_status ===\"Preparing\"){\n              newdata.Preparing+=1;\n          }\n          else if (data[i].Order_status ===\"Awaiting_Cancel\"){\n            newdata.Awaiting_Cancel+=1;\n            }\n          else if (data[i].Order_status ===\"Cancelled\"){\n            newdata.Cancelled+=1;\n            }\n            else if (data[i].Order_status ===\"Delivered\"){\n                newdata.Delivered+=1;\n                }\n\n          \n        }\n        // console.log(newdata);\n        return newdata\n    }\n\n    // console.log(orderNum);\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n\n    return (\n        <Box\n        \n        pt=\"100px\"\n        // pl={{ base: \"10px\", sm: \"100px\" }}\n        // pr={{ base: \"10px\", sm: \"100px\" }} \n        >\n            \n            <Grid\n            \n                templateColumns=\"repeat(5, 1fr)\"\n                templateRows=\"repeat(2, 1fr)\"\n                \n                \n            >        \n                <GridItem  colSpan={1} rowSpan={2} >\n                    <CustomerDashSideBar page=\"dashboard\" />\n                </GridItem>\n            \n                <GridItem colSpan={4} m={5} mt={8}>\n                    <Box \n                        width=\"auto\"\n                        h=\"auto\"\n                        \n                        overflow=\"hidden\"\n                        p=\"10px\"\n                        pb=\"5px\"\n                        bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\n                        borderRadius='10px'\n                        >\n                        \n                        <Grid \n                            templateRows=\"repeat(2, 1fr)\"\n                            gap={4}\n                            \n                        >\n                            <GridItem p=\"10px\"  >\n                                  <SimpleGrid columns={2} spacing={5}>\n                                        <Box >\n                                            <Avatar\n                                                size=\"xl\"\n                                                // name={userdata[0].First_Name + \" \" + userdata[0].Last_Name}\n                                                src=\"https://images.unsplash.com/photo-1553267751-1c148a7280a1?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80\"\n                                            />\n                                        </Box>\n                                        <Box >\n                                        <Heading size='lg'> Hello, {userdata.First_name + \" \" + userdata.Last_name} </Heading>\n                                        </Box>\n                                    </SimpleGrid>\n    \n                            </GridItem >\n                            \n                            <GridItem >\n                                       <Box \n                                        bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                                        borderRadius='md'\n                                       \n                                        color='white'\n                                       >\n                                           <SimpleGrid columns={5} spacing={5} pt='10px' pb='10px'>\n                                            \n                                                <Box textAlign='center'>\n                                                    <Heading textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} as='h4' size='lg'> {orderNum.Preparing} </Heading>\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>  Awaiting Shipment</Text>\n                                                </Box>\n                                      \n                                                <Box textAlign='center' >\n                                                    \n                                                    <Heading as='h4' size='lg' textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}> {orderNum.Shipped} </Heading>\n                                                    \n                                                    <Text  textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Shipped</Text>\n                                                </Box> \n                                              \n                                      \n                                                <Box textAlign='center'>\n                                                    <Heading textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} as='h4' size='lg'> {orderNum.Awaiting_Cancel} </Heading>\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Awaiting Cancel</Text>\n                                                </Box>\n                                                <Box textAlign='center'>\n                                                    <Heading as='h4' size='lg' textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}> {orderNum.Cancelled} </Heading>\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Cancelled</Text>\n                                                </Box>\n                                                <Box textAlign='center'>\n                                                   <Heading as='h4' size='lg' textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}> {orderNum.Delivered} </Heading>\n                                                    \n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Delivered</Text>\n                                                </Box>\n                                                \n                                            </SimpleGrid> \n\n                                       </Box>\n                            </GridItem>\n                            \n                        </Grid>\n\n                    </Box>\n\n                        \n\n                </GridItem>\n            </Grid>\n\n\n        </Box>\n    )\n}\n\nexport default CustomerDashboard\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CustomerAdress.js",["156","157","158"],"import {\n    Box,\n    Grid,\n    GridItem, \n    Heading,  \n    Flex,\n    Spacer ,\n    Button,\n    useDisclosure,\n    Modal,\n    ModalBody,\n    ModalContent,\n    ModalOverlay,\n    ModalCloseButton,\n    ModalHeader,\n    useToast,\n    useColorMode\n  } from \"@chakra-ui/react\";\n\nimport React, { useState, useEffect } from \"react\";\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\nimport ShipAddressses from \"../components/ShipAddressses\";\nimport AddAddress from \"../components/AddAddress\"\nimport Axios from \"axios\";\n\nconst CustomerAddress = () => {\n\n    const [address,setAddress] = useState([])\n\n    // {\n    //     id:1,\n    //     name:'pasan madushan',\n    //     tp:'07704543436',\n    //     street:'1234',\n    //     city:'abc',\n    //     state:'def',\n    //     zip:'12121'   \n                   \n    // },\n    // {\n    //     id:2,\n    //     name:'vimukthi madushan',\n    //     tp:'077238404543436',\n    //     street:'sdfsdf',\n    //     city:'sdflndsfldsnfk',\n    //     state:'slfnsdflnsdf',\n    //     zip:'1203948234121'      \n               \n    // },\n    // {\n    //     id:3,\n    //     name:'chalindu malshika',\n    //     tp:'077043543436',\n    //     street:'0324284',\n    //     city:'rathnapura',\n    //     state:'hdlfdfs',\n    //     zip:'139202121'     \n        \n         \n    // },\n    // {\n    //     id:4,\n    //     name:'chandima',\n    //     tp:'042342492',\n    //     street:'1234',\n    //     city:'jsdofjsdof',\n    //     state:'sdofjdsf',\n    //     zip:'12121'    \n                  \n    // },\n\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const toast = useToast()\n\n    useEffect(() => {\n        Axios.get(\"http://localhost:5000/customer/addresses\")\n        .then((Response)=>{\n            // console.log(Response.data.addresses);\n            setAddress(Response.data.addresses);\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Error loading data\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          }); \n    }, [])\n\n    \n\n    //delete an addresss\n    const deleteAddress  = (id)=>{\n        Axios.delete(\"http://localhost:5000/customer/addresses\",{data:{id:id}})\n        .then((Response)=>{\n            // console.log(Response);\n            setAddress(address.filter(\n                (address)=>address.Address_ID!==id\n            ))\n            toast({\n                position: \"bottom-right\",    \n                description: \"Shipping address deleted successfully\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Internal Server Error. Try again later\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          }); \n\n        \n    }\n\n    //add new address\n    const addAddress = (Address)=>{\n        console.log(Address);\n        Axios.post(\"http://localhost:5000/customer/addresses\",{Address:Address})\n        .then((Response)=>{\n            var Address_ID = Response.data.insertId;\n            // console.log(Response.json());\n            var newAddress = {Address_ID,...Address}\n            // console.log(newAddress);\n            setAddress([...address,newAddress]);\n           \n            toast({\n                position: \"bottom-right\",    \n                description: \"New shipping address added successfully\",\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n              })\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Internal Server Error. Try again later\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          });  \n\n    }\n\n    //update address\n    const updateAddress  = async(data)=>{\n        console.log('update address data ----------------')\n        console.log(data);\n        // setTasks(tasks.map(\n        //     (task)=>task.id===id?{...task,reminder:data.reminder}:task\n        //   ))\n        // await setAddress(address.map(\n        //     (address1)=>address1.id==data.id?{...address1,name:data.name}:address1\n        // ))\n        // // console.log(address[0])\n          setAddress(address.map(\n            (address1)=>(address1.id==data.id)?{...address1,data}:address1\n        ))\n          }\n\n\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    \n\n    return (\n        <Box\n        \n        pt=\"100px\"\n        // pl={{ base: \"10px\", sm: \"100px\" }}\n        // pr={{ base: \"10px\", sm: \"100px\" }} \n        >\n            \n            <Grid\n            \n                templateColumns=\"repeat(5, 1fr)\"\n                templateRows=\"repeat(1, 1fr)\"\n                \n            >        \n                <GridItem  colSpan={1} rowSpan={2} >\n                    <CustomerDashSideBar page=\"customeraddress\" />\n                </GridItem>\n            \n                <GridItem colSpan={4} >\n                    <Box \n                        width=\"auto\"\n                        h=\"auto\"                   \n                        overflow=\"hidden\"                    \n                        pb=\"5px\"                      \n                        >\n                        \n                      </Box>\n\n                        <Grid templateColumns=\"repeat(3, 1fr)\" >\n\n                            <GridItem colSpan={3} bg='cyan.900' p='10px'>\n                                <Flex> \n                                    <Box  p=\"3\">\n                                    <Heading as='h3' size='md' color='white'> My Shipping Address </Heading> \n                                    </Box>\n                                    <Spacer />\n                                    <Box p=\"1\">\n                                        <Button onClick={onOpen} colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} border='2px' borderColor='cyan.50' size=\"md\">\n                                            Add Shipping Address\n                                        </Button>\n                    \n                                            <Modal onClose={onClose} isOpen={isOpen} isCentered>\n                                            <ModalOverlay />\n                                                <ModalContent>\n                                                    <ModalHeader>Add New Shipping Address</ModalHeader>\n                                                    <ModalCloseButton />\n                                                    <ModalBody pb='5'>\n                                                    <AddAddress addAddress={addAddress} trigger={onClose}/>\n                                                     </ModalBody>\n                                                    \n                                                </ModalContent>\n                                            </Modal>\n\n                                    </Box>\n                                 \n                                 </Flex>\n                            </GridItem>\n\n                       \n                                <ShipAddressses addresses={address} deleteAddress={deleteAddress}  updateAddress={updateAddress}  />\n  \n                        </Grid>\n                        \n\n                </GridItem>\n            </Grid>\n\n\n        </Box>\n    )\n}\n\nexport default CustomerAddress\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/ChangePersonalDet.js",["159","160","161","162","163"],"import {\n    Box,\n    Grid,\n    GridItem,\n    useColorMode,\n    Flex,\n    Heading,\n    useDisclosure,\n    useToast,\n  } from \"@chakra-ui/react\";\n\nimport React, { useState, useEffect } from \"react\";\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\nimport ChangePasswordForm from \"../components/ChangePasswordForm\";\nimport ChangePersonalDetails from \"../components/ChangePersonalDetForm\";\n\nconst ChangePersonalDet = () => { \n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    const toast = useToast();\n\n        return (\n            <Box\n            \n            pt=\"100px\"\n            // pl={{ base: \"10px\", sm: \"100px\" }}\n            // pr={{ base: \"10px\", sm: \"100px\" }} \n            >\n                \n                <Grid\n            \n            templateColumns=\"repeat(5, 1fr)\"\n            templateRows=\"repeat(1, 1fr)\"\n            \n        >        \n            <GridItem  colSpan={1} rowSpan={2} >\n                <CustomerDashSideBar page=\"customeraddress\" />\n            </GridItem>\n        \n            <GridItem colSpan={4} >\n                <Box \n                    width=\"auto\"\n                    h=\"auto\"                   \n                    overflow=\"hidden\"                    \n                    pb=\"5px\"                      \n                    >\n                    \n                  </Box>\n\n                    <Grid templateColumns=\"repeat(3)\">\n\n                        <GridItem bg='cyan.900' p='10px' colSpan={3}>\n                            <Flex> \n                                <Box  p=\"3\">\n                                <Heading as='h3' size='md' color='white'> Change Account Details </Heading> \n                                </Box>\n                                                   \n                             </Flex>\n                        </GridItem>\n\n                        <GridItem colSpan={2}>\n                              <Box bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}  p='10' m='5' border='2px' borderColor='teal.600' borderRadius='15px'>         \n                            <ChangePersonalDetails />  \n                            {/* data={ personaldet } updateDetails={updateDetails}  */}\n                            </Box>\n                       </GridItem>\n\n                       <GridItem >\n                       <Box bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}  p='10' m='5' border='2px' borderColor='teal.600' borderRadius='15px'> \n                       <ChangePasswordForm />\n                       \n                       </Box>\n                       </GridItem>\n\n                    </Grid>\n            </GridItem>\n\n         \n        </Grid>\n\n    \n            </Box>\n        )\n\n\n}\n\nexport default ChangePersonalDet","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CardDetails.js",["164","165"],"import {\n    Box,\n    Grid,\n    GridItem, \n    Heading,  \n    Flex,\n    Spacer ,\n    Button,\n    useDisclosure,\n    Modal,\n    ModalBody,\n    ModalContent,\n    ModalOverlay,\n    ModalCloseButton,\n    ModalHeader,\n    useToast,\n    useColorMode\n  } from \"@chakra-ui/react\";\n\nimport React, { useState, useEffect } from \"react\";\nimport AddBankCard from \"../components/AddBankCard\";\nimport BankCards from \"../components/BankCards\";\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\nimport Axios from \"axios\";\n\nconst CardDetails = () => {\n\n    const [bankCards,setBankCards] = useState([])\n\n    // {\n    //     Card_Number:323446453434,\n    //     Owner:'pasan madushan',\n    //     cvv:'123',\n    //     Exp_Date:'10/12',\n              \n    // },\n    // {\n    //     Card_Number:323446453435,\n    //     Owner:'vimukthi madushan',\n    //     cvv:'123',\n    //     Exp_Date:'10/12',\n              \n    // },\n\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const toast = useToast()\n\n    useEffect(() => {\n        Axios.get(\"http://localhost:5000/customer/bankCards\")\n        .then((Response)=>{\n            // console.log(Response.data.addresses);\n            setBankCards(Response.data.bankCards);\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Error loading data\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          }); \n    }, [])\n\n\n    //delete a card\n    const deleteBankCard  = (cardNumber)=>{\n\n        Axios.delete(\"http://localhost:5000/customer/bankCards\",{data:{cardNumber:cardNumber}})\n        .then((Response)=>{\n            // console.log(Response);\n            setBankCards(bankCards.filter(\n                (bankCard)=>bankCard.Card_Number!==cardNumber\n            ))\n            toast({\n                position: \"bottom-right\",    \n                description: \"Bank Card deleted successfully\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Internal Server Error. Try again later\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          }); \n    }\n\n    //add new card\n    const addBankCard = (CardDetails)=>{\n\n        Axios.post(\"http://localhost:5000/customer/bankCards\",{CardDetails:CardDetails})\n        .then((Response)=>{\n            // console.log(Response.json());\n            // console.log(newAddress);\n            setBankCards([...bankCards,CardDetails]);\n           \n            toast({\n                position: \"bottom-right\",    \n                description: \"New payment method added successfully\",\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n              })\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Internal Server Error. Try again later\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          });       \n\n    }\n\n   \n    const { colorMode, toggleColorMode } = useColorMode();\n\n    \n\n    return (\n        <Box   pt=\"100px\">\n            \n            <Grid\n            \n                templateColumns=\"repeat(5, 1fr)\"\n                templateRows=\"repeat(1, 1fr)\"\n                \n            >        \n                <GridItem  colSpan={1} rowSpan={2} >\n                    <CustomerDashSideBar page=\"customeraddress\" />\n                </GridItem>\n            \n                <GridItem colSpan={4} >\n                    <Box \n                        width=\"auto\"\n                        h=\"auto\"                   \n                        overflow=\"hidden\"                    \n                        pb=\"5px\"                      \n                        >\n                        \n                      </Box>\n\n                        <Grid templateColumns=\"repeat(3, 1fr)\" >\n\n                            <GridItem colSpan={3} bg='cyan.900' p='10px'>\n                                <Flex> \n                                    <Box  p=\"3\">\n                                    <Heading as='h3' size='md' color='white'> Card & Bank Details </Heading> \n                                    </Box>\n                                    <Spacer />\n                                    <Box p=\"1\">\n                                        <Button onClick={onOpen} colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} border='2px' borderColor='cyan.50' size=\"md\">\n                                            Add New Payment Method\n                                        </Button>\n                    \n                                            <Modal onClose={onClose} isOpen={isOpen} isCentered>\n                                            <ModalOverlay />\n                                                <ModalContent>\n                                                    <ModalHeader>Add New Payment Method</ModalHeader>\n                                                    <ModalCloseButton />\n                                                    <ModalBody pb='5'>\n                                                    <AddBankCard addBankCard={addBankCard} trigger={onClose}/>\n                                                     </ModalBody>\n                                                    \n                                                </ModalContent>\n                                            </Modal>\n\n                                    </Box>\n                                 \n                                 </Flex>\n                            </GridItem>\n\n                                <BankCards bankcards={bankCards} deleteBankCard={deleteBankCard} />\n                                \n                        </Grid>\n                        \n\n                </GridItem>\n            </Grid>\n\n\n        </Box>\n    )\n}\n\nexport default CardDetails\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/AllOrders.js",["166"],"\nimport {\n    Box,\n    Grid,\n    GridItem, \n    useColorMode,\n    Flex,\n    Heading,\n    Divider,\n    HStack,Spacer\n  } from \"@chakra-ui/react\";\n\nimport React, {useState} from \"react\";\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\nimport OrderTiles from \"..//components/OrderTiles\";\n\n  \n\nconst AllOrders = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    const [orders,setOrders] = useState([\n        {\n            orderID:1,\n            orderStatus:'preparing',\n            orderedDate:'21/01',\n            orderItemTitle:'Purple Rose Jewelry Water Transfer Tattoo',\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\n            quantity:5,\n            orderAmount:35.47,\n            trackingNumber:'23232323232323'\n                  \n        },\n        {\n            orderID:2,\n            orderStatus:'shipped',\n            orderedDate:'13/01',\n            \n            orderItemTitle:'Marvel batman',\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\n            quantity:2,\n            orderAmount:37.24,\n            trackingNumber:'23232323232323'\n                  \n        },\n        {\n            orderID:3,\n            \n            orderStatus:'preparing',\n            orderedDate:'15/01',\n            \n            orderItemTitle:'sonic toy',\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\n            quantity:3,\n            orderAmount:24.56,\n            trackingNumber:'23232323232323'\n                  \n        },\n        {\n            orderID:4,\n            \n            orderStatus:'preparing',\n            orderedDate:'15/01',\n            \n            orderItemTitle:'sonic toy',\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\n            quantity:3,\n            orderAmount:24.56,\n            trackingNumber:'23232323232323'\n                  \n        },\n        {\n            orderID:5,\n            \n            orderStatus:'preparing',\n            orderedDate:'15/01',\n            \n            orderItemTitle:'sonic toy',\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\n            quantity:3,\n            orderAmount:24.56,\n            trackingNumber:'23232323232323'\n                  \n        },\n    ])\n\n\n    const countOrders = ()=>{\n        var prep = 0\n        var ship = 0\n        var canc = 0\n        var await_can = 0\n        var received = 0\n        for (var i=0;i<orders.length;i++){\n            if(orders[i].orderStatus==='preparing'){\n                prep+=1\n            }\n            else if (orders[i].orderStatus==='shipped'){\n                ship+=1\n            }\n            else if (orders[i].orderStatus==='cancelled'){\n                canc+=1\n            }\n            else if (orders[i].orderStatus==='await_cancel'){\n                await_can+=1\n            }\n            else if (orders[i].orderStatus==='received'){\n                received+=1\n            }\n        }\n        return {prep,ship,canc,await_can,received}\n    }\n\n    const getacount = countOrders()\n\n    const cancelOrder = (order_id)=>{\n            // console.log(order_id)\n            setOrders(orders.map(\n              (order)=>order.orderID===order_id?{...order,orderStatus:'await_cancel'}:order\n            ))\n            \n    }\n\n    const confirmOrder = (order_id)=>{\n        setOrders(orders.map(\n            (order)=>order.orderID===order_id?{...order,orderStatus:'received'}:order\n          ))\n    }\n\n\n    return (\n        <Box\n        \n        pt=\"100px\"\n        // pl={{ base: \"10px\", sm: \"100px\" }}\n        // pr={{ base: \"10px\", sm: \"100px\" }} \n        >\n            \n            <Grid\n            \n                templateColumns=\"repeat(5, 1fr)\"\n                templateRows=\"repeat(1, 1fr)\"\n                \n            >        \n                <GridItem  colSpan={1} rowSpan={2} >\n                    <CustomerDashSideBar page=\"customeraddress\" />\n                </GridItem>\n            \n                <GridItem colSpan={4} >\n                    <Box \n                        width=\"auto\"\n                        h=\"auto\"                   \n                        overflow=\"hidden\"                    \n                        pb=\"5px\"                      \n                        >\n                        \n                      </Box>\n\n                        <Grid>\n\n                            <GridItem bg='cyan.900' p='10px'>\n                                <Flex> \n                                    <Box  p=\"3\">\n                                    <Heading as='h3' size='md' color='white'> All Orders </Heading> \n                                    </Box>\n                            \n                                 </Flex>\n                            </GridItem>\n\n                            <GridItem p='5'>\n                              <Grid templateColumns=\"repeat(5, 1fr)\">\n                                <GridItem colSpan={4}>\n\n                                    <OrderTiles orders={orders} cancelOrder={cancelOrder} confirmOrder={confirmOrder}/>\n\n                                </GridItem>\n                                <GridItem >\n                                    <Box bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} p='10px' mt='20px' color={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>\n                                        <Heading size='sm' textAlign='center'>Summary</Heading>\n                                        <Divider mt='2' mb='2'/>\n                                        <HStack>\n                                            <Box ml='3'>Preparing </Box>\n                                            <Spacer />\n                                            <Box mr='3'>{getacount.prep}</Box>\n                                        </HStack>\n                                        <HStack>\n                                            <Box ml='3'>Shipped </Box>\n                                            <Spacer />\n                                            <Box mr='3'>{getacount.ship}</Box>\n                                        </HStack>\n                                        <HStack>\n                                            <Box ml='3'>Await Cancel </Box>\n                                            <Spacer />\n                                            <Box mr='3'>{getacount.await_can}</Box>\n                                        </HStack>\n                                        <HStack>\n                                            <Box ml='3'>Cancelled </Box>\n                                            <Spacer />\n                                            <Box mr='3'>{getacount.canc}</Box>\n                                        </HStack>\n                                        <HStack>\n                                            <Box ml='3'>Received </Box>\n                                            <Spacer />\n                                            <Box mr='3'>{getacount.received}</Box>\n                                        </HStack>\n                                    </Box>\n\n                                </GridItem>\n                              </Grid>\n                            </GridItem>\n                       \n                             \n                        </Grid>\n                        \n\n                </GridItem>\n            </Grid>\n\n\n        </Box>\n    )\n}\n\nexport default AllOrders\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/TrackOrder.js",["167","168"],"import React from 'react'\nimport { \n    Box,\n    Grid,\n    GridItem,\n    Heading,\n    Center,\n    useColorMode,\n    Badge,\n    Text\n        } from \"@chakra-ui/react\";\n\nconst TrackOrder = () => {\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n\n    return (\n        <Box \n            pt=\"110px\"\n            pl={{ base: \"10px\", sm: \"100px\" }}\n            pr={{ base: \"10px\", sm: \"100px\" }}\n        >\n            <Box mt='20px' mb='20px' p='3' bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}>\n                <Center><Heading textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} as='h3' size='md'>Track Your Order</Heading></Center>        \n            </Box>\n            <Grid\n                h=\"600px\"\n                templateRows=\"repeat(3, 1fr)\"\n                templateColumns=\"repeat(3, 1fr)\"\n                gap={4}\n            >\n                <GridItem colSpan={2}  bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} >\n\n                <Box p='5'>\n                    <Badge mr='3' variant=\"outline\" fontSize='md' colorScheme=\"teal\">\n                    Estimated Delivery \n                    </Badge>\n                   dsdsd\n     \n                </Box>\n\n                </GridItem>\n\n                <GridItem bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} >\n\n                    <Box p='8'>\n                        xdsd\n                    </Box>\n\n                </GridItem>\n                <GridItem  rowSpan={2} colSpan={2} bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} />\n                <GridItem  bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}/>\n            </Grid>\n\n        </Box>\n    )\n}\n\nexport default TrackOrder\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/SpecficProductPage.js",["169","170","171","172"],"import {\n  Box,\n  Button,\n  Center,\n  Heading,\n  HStack,\n  IconButton,\n  Image,\n  SimpleGrid,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { AddIcon, MinusIcon, StarIcon } from \"@chakra-ui/icons\";\nimport CategorizedReviewPreview from \"../components/CategorizedReviewPreview\";\nimport ReviewCountPreview from \"../components/ReviewCountPreview\";\nimport SearchBar from \"../components/SearchBar\";\n\nfunction SpecificProductPage() {\n  let { id } = useParams();\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const [currentOrder, setCurrentOrder] = useState({ varient: 0, quantity: 0 });\n\n  const quantity_inc = () => {\n    setCurrentOrder({ ...currentOrder, quantity: currentOrder.quantity + 1 });\n  };\n  const quantity_dec = () => {\n    if (currentOrder.quantity > 0)\n      setCurrentOrder({ ...currentOrder, quantity: currentOrder.quantity - 1 });\n  };\n\n  const [data, setData] = useState({\n    item_ID: \"233d\",\n    item_name: \"Electric tooth brush\",\n    category: \"electronic\",\n    price: 200.0,\n    orders: 345,\n    description:\n      \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n    status: \"Available\",\n    feedbacks: [\n      {\n        customer_name: \"jof hagi\",\n        customer_dp: \"jof hagi\",\n        comment: \"asdasds asdasd sad\",\n        rating: 4,\n        reply: [\"sfsdfsd\", \"Thank you\"],\n      },\n      {\n        customer_name: \"den kali\",\n        customer_dp: \"jof hagi\",\n        comment: \"axasxas asdasd sad\",\n        rating: 5,\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\n      },\n      {\n        customer_name: \"gendi gahnadi\",\n        customer_dp: \"jof hagi\",\n        comment: \"hgfhf dghhdgf dfgshssdd\",\n        rating: 2,\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\n      },\n      {\n        customer_name: \"den kali\",\n        customer_dp: \"jof hagi\",\n        comment: \"axasxas asdasd sad\",\n        rating: 2,\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\n      },\n    ],\n    variants: [\n      {\n        varient_name: \"white 2 brushes\",\n        image:\n          \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\n        color: \"green\",\n        details: \"\",\n        Quantity: 450,\n      },\n      {\n        varient_name: \"pink 2 brushes with bateries\",\n        image:\n          \"https://www.powerplanetonline.com/cdnassets/xiaomi_soocas_x3u_sonic_electric_toothbrush_01_rosa_l.jpg\",\n        color: \"pink\",\n        details: \"\",\n        Quantity: 230,\n      },\n      {\n        varient_name: \"two heads only\",\n        image:\n          \"https://dam.which.co.uk/3b117c36-ca30-49bb-853c-9d31b220a90d.jpg\",\n        color: \"blue\",\n        details: \"\",\n        Quantity: 500,\n      },\n    ],\n  });\n\n  var imageStack = new Array(data.variants.length)\n    .fill(0)\n    .map((zero, index) => (\n      <Box\n        cursor=\"pointer\"\n        borderWidth={currentOrder.varient === index ? \"3px\" : \"1px\"}\n        borderColor=\"gray.500\"\n        onClick={() => setCurrentOrder({ ...currentOrder, varient: index })}\n      >\n        <Image\n          src={data.variants[index].image}\n          w=\"100px\"\n          h=\"100px\"\n          alt=\"image\"\n        />\n      </Box>\n    ));\n\n  return (\n    <Box\n      pt=\"150px\"\n      pl={{ base: \"10px\", sm: \"100px\" }}\n      pr={{ base: \"10px\", sm: \"100px\" }}\n    >\n      <Center mb=\"20px\">\n        <SearchBar text=\"I'm shopping for\" />\n      </Center>\n\n      <SimpleGrid\n        columns={2}\n        spacing={5}\n        minChildWidth=\"400px\"\n        borderWidth=\"2px\"\n        borderRadius=\"lg\"\n        borderColor=\"gray.300\"\n      >\n        <Box width=\"auto\" h=\"auto\" overflow=\"hidden\" p=\"5px\">\n          <Image\n            src={data.variants[currentOrder.varient].image}\n            w=\"auto\"\n            h=\"auto\"\n            alt=\"image\"\n            fit\n          />\n        </Box>\n        <Box\n          width=\"auto\"\n          h=\"auto\"\n          overflow=\"hidden\"\n          p={{ base: \"5px\", sm: \"20px\" }}\n        >\n          <Heading as=\"h2\" size=\"2xl\">\n            {data.item_name}\n          </Heading>\n\n          <Text fontSize=\"xl\" ml=\"3px\" mt=\"5px\">\n            {data.category}\n          </Text>\n          <Box d=\"flex\" mt=\"2\" ml=\"2px\" alignItems=\"center\">\n            {Array(5)\n              .fill(\"\")\n              .map((_, i) => (\n                <StarIcon\n                  key={i}\n                  color={i < data.feedbacks[0].rating ? \"cyan.500\" : \"cyan.300\"}\n                />\n              ))}\n            <Box as=\"span\" ml=\"2\" fontSize=\"sm\">\n              {data.feedbacks.length} reviews &bull; {data.orders} orders\n            </Box>\n          </Box>\n          <Heading as=\"h4\" size=\"md\" mt=\"20px\">\n            Varient\n          </Heading>\n          <HStack mt=\"20px\">{imageStack}</HStack>\n          <Heading as=\"h4\" size=\"md\" mt=\"20px\">\n            Quantity\n          </Heading>\n          <HStack mt=\"10px\">\n            <IconButton\n              size=\"xs\"\n              aria-label=\"Search database\"\n              icon={<AddIcon />}\n              onClick={quantity_inc}\n            />\n            <Text>{currentOrder.quantity}</Text>\n            <IconButton\n              size=\"xs\"\n              aria-label=\"Search database\"\n              icon={<MinusIcon />}\n              onClick={quantity_dec}\n            />\n          </HStack>\n\n          <HStack mt=\"20px\">\n            <Button colorScheme=\"cyan\" color=\"white\" size=\"lg\">\n              Buy now\n            </Button>\n            <Button colorScheme=\"orange\" size=\"lg\" variant=\"outline\">\n              Add to cart\n            </Button>\n          </HStack>\n        </Box>\n      </SimpleGrid>\n      <Box\n        width=\"auto\"\n        h=\"auto\"\n        borderWidth=\"2px\"\n        borderRadius=\"lg\"\n        borderColor=\"gray.300\"\n        overflow=\"hidden\"\n        p={{ base: \"5px\", sm: \"20px\" }}\n        mt=\"20px\"\n        mb=\"10px\"\n      >\n        <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\n          Description\n        </Heading>\n        <Text fontSize=\"md\" ml=\"3px\" mt=\"5px\">\n          {data.description}\n        </Text>\n      </Box>\n      <Box\n        width=\"auto\"\n        h=\"auto\"\n        borderWidth=\"2px\"\n        borderRadius=\"lg\"\n        borderColor=\"gray.300\"\n        overflow=\"hidden\"\n        p={{ base: \"5px\", sm: \"20px\" }}\n        mt=\"20px\"\n        mb=\"100px\"\n      >\n        <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\n          Reviews\n        </Heading>\n\n        <ReviewCountPreview feedbacks={data.feedbacks} />\n        <Tabs>\n          <TabList>\n            <Tab>\n              <StarIcon color=\"cyan.500\" /> All\n            </Tab>\n            <Tab>\n              <StarIcon color=\"cyan.500\" /> 5\n            </Tab>\n            <Tab>\n              <StarIcon color=\"cyan.500\" /> 4\n            </Tab>\n            <Tab>\n              <StarIcon color=\"cyan.500\" /> 3\n            </Tab>\n            <Tab>\n              <StarIcon color=\"cyan.500\" /> 2\n            </Tab>\n            <Tab>\n              <StarIcon color=\"cyan.500\" /> 1\n            </Tab>\n          </TabList>\n\n          <TabPanels>\n            <TabPanel>\n              <CategorizedReviewPreview\n                feedbacks={data.feedbacks}\n                rating=\"all\"\n              />\n            </TabPanel>\n            <TabPanel>\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={5} />\n            </TabPanel>\n            <TabPanel>\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={4} />\n            </TabPanel>\n            <TabPanel>\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={3} />\n            </TabPanel>\n            <TabPanel>\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={2} />\n            </TabPanel>\n            <TabPanel>\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={1} />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Box>\n  );\n}\n\nexport default SpecificProductPage;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CategoryPage.js",["173","174","175"],"import {\n  Box,\n  Button,\n  Center,\n  Grid,\n  GridItem,\n  Heading,\n  useColorMode,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nimport SearchBar from \"../components/SearchBar\";\nimport ProductCard from \"../components/ProductCard\";\n\nfunction CategoryPage() {\n  const [categories, setCategories] = useState([\n    \"All categories\",\n    \"Phones\",\n    \"Smart Watches\",\n    \"Tabs\",\n    \"Headphones\",\n    \"Chargers\",\n  ]);\n\n  const { colorMode, toggleColorMode } = useColorMode();\n  const [activeCategory, setActiveCategory] = useState(categories[0]);\n  const [activeCategoryProducts, setActiveCategoryProducts] = useState([\n    {\n      item_ID: \"233d\",\n      item_name: \"Electric tooth brush\",\n      category: \"electronic\",\n      price: 200.0,\n      orders: 345,\n      reviews:100,\n      rating:3,\n      description:\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n      status: \"Available\",\n      image:\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\n    },\n    {\n      item_ID: \"34cd\",\n      item_name: \"Iphone 8\",\n      category: \"electronic\",\n      price: 200.0,\n      orders: 345,\n      reviews:100,\n      rating:3,\n      description:\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n      status: \"Available\",\n      image:\n        \"../images/iphone.jpg\",\n    },\n    {\n      item_ID: \"34cd\",\n      item_name: \"Iphone 8\",\n      category: \"electronic\",\n      price: 200.0,\n      orders: 345,\n      reviews:250,\n      rating:4,\n      description:\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n      status: \"Out of stock\",\n      image:\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\n    },\n    {\n      item_ID: \"34cd\",\n      item_name: \"Iphone 8\",\n      category: \"electronic\",\n      price: 200.0,\n      orders: 345,\n      reviews:150,\n      rating:2,\n      description:\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n      status: \"Available\",\n      image:\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\n    },\n    {\n      item_ID: \"34cd\",\n      item_name: \"Iphone 8\",\n      category: \"electronic\",\n      price: 200.0,\n      orders: 345,\n      reviews:50,\n      rating:5,\n      description:\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n      status: \"Available\",\n      image:\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\n    },\n  ]);\n\n  var searchBarText = `Search in ${activeCategory}`;\n\n  const HandleClick = (category) => {\n    setActiveCategory(category);\n\n  };\n\n  return (\n    <Box\n      pt=\"150px\"\n      pl={{ base: \"10px\", sm: \"100px\" }}\n      pr={{ base: \"10px\", sm: \"100px\" }}\n    >\n      <Center mb='10px'>\n        <SearchBar text={searchBarText} />\n      </Center>\n      <Grid\n        templateRows=\"repeat(1, 1fr)\"\n        templateColumns=\"repeat(5, 1fr)\"\n        gap={0}\n        pb='200px'\n      >\n        <GridItem rowSpan={1} colSpan={1} bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"} p=\"10px\">\n          <Heading as=\"h3\" size=\"lg\" mb=\"20px\">\n            Categories\n          </Heading>\n          <VStack>\n            {Array(categories.length)\n              .fill(\"\")\n              .map((_, i) =>\n                categories[i] === activeCategory ? (\n                  <Button\n                    w=\"100%\"\n                    variant=\"ghost\"\n                    colorScheme=\"gray\"\n                    isActive\n                    onClick={() => HandleClick(categories[i])}\n                  >\n                    {categories[i]}\n                  </Button>\n                ) : (\n                  <Button\n                    w=\"100%\"\n                    variant=\"ghost\"\n                    colorScheme=\"gray\"\n                    onClick={() => HandleClick(categories[i])}\n                  >\n                    {categories[i]}\n                  </Button>\n                )\n              )}\n          </VStack>\n        </GridItem>\n        <GridItem\n          rowSpan={1}\n          colSpan={4}\n          borderWidth=\"1px\"\n          borderColor=\"gray.300\"\n          p=\"20px\"\n        >\n          <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\n            {activeCategory}\n          </Heading>\n          <Grid h=\"auto\" templateColumns=\"repeat(4, 1fr)\" gap={2}>\n            {Array(activeCategoryProducts.length)\n              .fill(\"\")\n              .map((_, i) => (\n                <ProductCard\n                  title={activeCategoryProducts[i].item_name}\n                  imageUrl={activeCategoryProducts[i].image}\n                  itemName= {activeCategoryProducts[i].item_name}\n                  category= {activeCategoryProducts[i].category}\n                  price= {activeCategoryProducts[i].price}\n                  orders= {activeCategoryProducts[i].orders}\n                  status={activeCategoryProducts[i].status}\n                  rating={activeCategoryProducts[i].rating}\n                  reviews={activeCategoryProducts[i].reviews}\n                  \n                />\n              ))}\n          </Grid>\n        </GridItem>\n      </Grid>\n    </Box>\n  );\n}\n\nexport default CategoryPage;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/FeedbackPage.js",["176","177","178","179","180","181","182","183","184","185","186","187","188"],"import {\n    Box,\n    Center,\n    Heading,\n    Image,\n    SimpleGrid,\n    Textarea,\n    Text,\n    useColorMode,\n} from \"@chakra-ui/react\";\nimport { Button, ButtonGroup } from \"@chakra-ui/react\"\nimport { Stack, HStack, VStack } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\n\nimport { AddIcon, MinusIcon, ArrowForwardIcon, StarIcon } from \"@chakra-ui/icons\";\nimport CategorizedReviewPreview from \"../components/CategorizedReviewPreview\";\nimport ReviewCountPreview from \"../components/ReviewCountPreview\";\nimport SearchBar from \"../components/SearchBar\";\n\nfunction FeedbackPage(props) {\n    let { id } = useParams();\n    const { colorMode, toggleColorMode } = useColorMode();\n    const [currentOrder, setCurrentOrder] = useState({ varient: 0, quantity: 0 });\n\n    const quantity_inc = () => {\n        setCurrentOrder({ ...currentOrder, quantity: currentOrder.quantity + 1 });\n    };\n    const quantity_dec = () => {\n        setCurrentOrder({ ...currentOrder, quantity: currentOrder.quantity - 1 });\n    };\n\n    const [data, setData] = useState({\n        item_ID: \"233d\",\n        item_name: \"Electric tooth brush\",\n        category: \"electronic\",\n        price: 200.0,\n        orders: 345,\n        description:\n            \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\n        status: \"Available\",\n        feedbacks: [\n            {\n                customer_name: \"jof hagi\",\n                customer_dp: \"jof hagi\",\n                comment: \"asdasds asdasd sad\",\n                rating: 4,\n                reply: [\"sfsdfsd\", \"Thank you\"],\n            },\n            {\n                customer_name: \"den kali\",\n                customer_dp: \"jof hagi\",\n                comment: \"axasxas asdasd sad\",\n                rating: 5,\n                reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\n            },\n            {\n                customer_name: \"gendi gahnadi\",\n                customer_dp: \"jof hagi\",\n                comment: \"hgfhf dghhdgf dfgshssdd\",\n                rating: 2,\n                reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\n            },\n            {\n                customer_name: \"den kali\",\n                customer_dp: \"jof hagi\",\n                comment: \"axasxas asdasd sad\",\n                rating: 2,\n                reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\n            },\n        ],\n        variants: [\n            {\n                varient_name: \"white 2 brushes\",\n                image:\n                    \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\n                color: \"green\",\n                details: \"\",\n                Quantity: 450,\n            },\n            {\n                varient_name: \"pink 2 brushes with bateries\",\n                image:\n                    \"https://www.powerplanetonline.com/cdnassets/xiaomi_soocas_x3u_sonic_electric_toothbrush_01_rosa_l.jpg\",\n                color: \"pink\",\n                details: \"\",\n                Quantity: 230,\n            },\n            {\n                varient_name: \"two heads only\",\n                image:\n                    \"https://dam.which.co.uk/3b117c36-ca30-49bb-853c-9d31b220a90d.jpg\",\n                color: \"blue\",\n                details: \"\",\n                Quantity: 500,\n            },\n        ]\n\n    });\n\n\n    return (\n        <Box\n            pt=\"150px\"\n            pl={{ base: \"10px\", sm: \"100px\" }}\n            pr={{ base: \"10px\", sm: \"100px\" }}\n\n        >\n            <Center mb='20px'>\n                <SearchBar text=\"I'm shopping for\" />\n            </Center>\n            <SimpleGrid columns={2} spacing={5} minChildWidth=\"400px\"\n                borderWidth=\"2px\"\n                borderRadius=\"lg\"\n                borderColor=\"gray.300\">\n                <Box\n                    width=\"auto\"\n                    h=\"auto\"\n                    overflow=\"hidden\"\n                    p=\"5px\"\n                >\n                    <Image\n                        src={data.variants[0].image}\n                        w=\"auto\"\n                        h=\"auto\"\n                        alt=\"image\"\n                        fit\n                    />\n                </Box>\n                <Box\n                    width=\"auto\"\n                    h=\"auto\"\n                    overflow=\"hidden\"\n                    p={{ base: \"5px\", sm: \"20px\" }}\n                >\n                    <Heading as=\"h2\" size=\"3xl\">\n                        Submit your feedback...\n                    </Heading>\n                    <Heading as=\"h2\" size=\"xl\">\n                        {data.item_name}\n                    </Heading>\n\n                    <Text fontSize=\"xl\" ml=\"3px\" mt=\"5px\" >\n                        {data.category}\n                    </Text>\n                    <Box d=\"flex\" mt=\"2\" ml=\"2px\" alignItems=\"center\">\n                        {Array(5)\n                            .fill(\"\")\n                            .map((_, i) => (\n                                <StarIcon\n                                    key={i}\n                                    color={i < data.feedbacks[0].rating ? \"cyan.500\" : \"cyan.300\"}\n                                />\n                            ))}\n                        <Box as=\"span\" ml=\"2\" fontSize=\"sm\">\n                            {data.feedbacks.length} reviews &bull; {data.orders} orders\n\n              </Box>\n\n                    </Box>\n                    <Box d=\"flex\" mt=\"10\" alignItems=\"center\">\n                        {Array(5)\n                            .fill(\"\")\n                            .map((_, i) => (\n                                <StarIcon\n                                    key={i}\n                                    color={i < props.rating ? \"cyan.800\" : \"gray.300\"}\n                                    //onClick={}\n                                    boxSize='20'\n                                />\n                            ))}\n                    </Box>\n                    <form>\n                        <Textarea mt=\"30px\" placeholder=\"Type your comment here...\" />\n                        <Stack direction=\"row\" spacing={4} mt=\"20px\">\n                            <Button\n                                loadingText=\"Submitting\" type=\"submit\" rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n                                Leave Feedback\n  </Button>\n                        </Stack>\n                    </form>\n                </Box>\n            </SimpleGrid>\n        </Box >\n\n\n    );\n}\n\nexport default FeedbackPage;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/pages/CartPage.js",["189","190","191","192"],"import {\n  Box,\n  Divider,\n  Heading,\n  Icon,\n  Img,\n  Table,\n  Tbody,\n  Td,\n  Text,\n  Tfoot,\n  Th,\n  Thead,\n  Tr,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport { FiShoppingCart } from \"react-icons/fi\";\nimport { useParams } from \"react-router-dom\";\n\nfunction CartPage() {\n  const [cartItems, setCartItems] = useState([\n    {\n      item_ID: \"213d\",\n      item_name: \"Electric tooth brush\",\n      price: 2000.0,\n      quantity: 2,\n      varient: \"pink\",\n      image: \"../images/pink.jpg\",\n    },\n    {\n      item_ID: \"235\",\n      item_name: \"IPhone 8\",\n      price: 50000.0,\n      quantity: 1,\n      varient: \"64GB\",\n      image: \"../images/iphone.jpg\",\n    },\n    {\n      item_ID: \"234d\",\n      item_name: \"Electric tooth brush\",\n      price: 2000.0,\n      quantity: 5,\n      varient: \"white\",\n      image: \"../images/White.jpg\",\n    },\n    {\n      item_ID: \"233d\",\n      item_name: \"Electric tooth brush\",\n      price: 300.0,\n      quantity: 5,\n      varient: \"blue\",\n      image: \"../images/blue.jpg\",\n    },\n  ]);\n\n  const [shippingAddress, setShippingAddress] = useState({\n    customer_name: 'Rahal Athukorala',\n    street:'No.231, Dutugamunu mv',\n    city:'Peliyagoda',\n    state:'western',\n    zip:'11830'\n  });\n\n  var TotalPrice = 0;\n  cartItems.forEach(element => {\n      TotalPrice = TotalPrice + (element.quantity * element.price)\n  });\n\n  let { customer_id } = useParams();\n\n\n  return (\n    <Box\n      pt=\"150px\"\n      pl={{ base: \"10px\", sm: \"100px\" }}\n      pr={{ base: \"10px\", sm: \"100px\" }}\n    >\n      <Box borderWidth=\"1px\" borderColor=\"gray.300\" p=\"20px\" mb='200px'>\n        <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\n          <Icon as={FiShoppingCart} w={12} h={12} /> Cart\n        </Heading>\n        <Table variant=\"simple\">\n          <Thead>\n            <Tr>\n              <Th>Product</Th>\n              <Th>Product name</Th>\n              <Th>Varient</Th>\n              <Th isNumeric>Quantity</Th>\n              <Th isNumeric>Price(each)</Th>\n              <Th isNumeric>Price</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {Array(cartItems.length)\n              .fill(\"\")\n              .map((_, i) => (\n                <Tr>\n                  <Td>\n                    <Img src={cartItems[i].image} w=\"50px\" h=\"50px\" />\n                  </Td>\n                  <Td>{cartItems[i].item_name}</Td>\n                  <Td>{cartItems[i].varient}</Td>\n                  <Td isNumeric>{cartItems[i].quantity}</Td>\n                  <Td isNumeric>{cartItems[i].price}</Td>\n                  <Td isNumeric>\n                    {cartItems[i].price * cartItems[i].quantity}\n                  </Td>\n                </Tr>\n              ))}\n          </Tbody>\n          <Tfoot>\n            <Tr>\n              <Th fontSize='3xl'>Total</Th>\n              <Th>-</Th>\n              <Th>-</Th>\n              <Th isNumeric>-</Th>\n              <Th isNumeric>-</Th>\n              <Th isNumeric fontSize='3xl'>Rs. {TotalPrice}</Th>\n            </Tr>\n          </Tfoot>\n        </Table>\n        <Divider/>\n        <Heading as=\"h2\" size=\"xl\" mb=\"20px\" mt='50px'>\n          Shipping address\n        </Heading>\n        <VStack>\n          <Text></Text>\n        </VStack>\n      </Box>\n    </Box>\n  );\n}\n\nexport default CartPage;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/Navbar.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/pages/SellerDashboard.js",["193","194","195","196","197","198","199","200","201","202","203"],"import {\n    Box,\n    Center,\n    Grid,\n    GridItem,\n    Heading,\n    VStack,\n    Input,\n    Stack,\n} from \"@chakra-ui/react\";\nimport { AddIcon, MinusIcon, ArrowForwardIcon, StarIcon } from \"@chakra-ui/icons\";\n\nimport { Button, ButtonGroup } from \"@chakra-ui/react\"\nimport {\n    FormControl,\n    FormLabel,\n    FormErrorMessage,\n    FormHelperText,\n} from \"@chakra-ui/react\"\nimport React, { useState } from \"react\";\nimport { Avatar, AvatarBadge, AvatarGroup } from \"@chakra-ui/react\"\nimport SearchBar from \"../components/SearchBar\";\n\nfunction SellerDashboard() {\n\n    return (\n        <Box\n            pt=\"150px\"\n            align='center'\n            pl={{ base: \"10px\", sm: \"100px\" }}\n            pr={{ base: \"10px\", sm: \"100px\" }}\n        >\n\n            <Grid\n                templateColumns=\"repeat(5, 1fr)\"\n                gap={0}\n                textAlign='center'\n                pb='200px'\n                w='800px'\n            >\n                <GridItem rowSpan={1} colSpan={1} bg=\"gray.300\" p=\"10px\">\n                    <Heading as=\"h3\" size=\"lg\" color=\"gray.600\" mb=\"20px\" w='300px'>\n                        <Avatar size=\"3xl\" name=\"Segun Adebayo\" src=\"https://bit.ly/sage-adebayo\" marginTop='40px' />\n                    </Heading>\n                    <VStack>\n\n                    </VStack>\n                </GridItem>\n                <GridItem\n                    rowSpan={1}\n                    colSpan={4}\n                    borderWidth=\"1px\"\n                    borderColor=\"gray.300\"\n                    p=\"20px\"\n                >\n                    <Heading as=\"h2\" size=\"2xl\" color=\"gray.600\" mb=\"20px\">\n                        Account Settings\n            </Heading>\n                    <FormControl id=\"email\" mt='30px'>\n                        <FormLabel>Email address</FormLabel>\n                        <Input type=\"email\" />\n                        <FormLabel mt='10px'>User Name</FormLabel>\n                        <Input type=\"string\" />\n                        <FormLabel mt='10px'>Password</FormLabel>\n                        <Input type=\"password\" />\n                        <FormLabel mt='10px'>Re-Enter Password</FormLabel>\n                        <Input type=\"password\" />\n                        <Stack direction=\"row\" spacing={4} mt=\"20px\">\n                            <Button\n                                loadingText=\"Submitting\" type=\"submit\" rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\n                                Update\n  </Button>\n                        </Stack>\n                    </FormControl>\n                </GridItem>\n            </Grid>\n        </Box>\n    );\n}\n\nexport default SellerDashboard;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ShipAddressses.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/components/CustomerDashSideBar.js",["204","205","206","207","208","209"],"import {\n    Box,\n    Grid,\n    GridItem, \n    Heading,\n    Text,\n    Divider,\n    Link,\n    Button,\n    useColorMode\n  } from \"@chakra-ui/react\";\n\n\n\nconst CustomerDashSideBar = ({page}) => {\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    const sidebarButton = {\n        width:'80%',   \n        marginTop:'7px',\n        marginBottom:'7px',\n        marginLeft:'10%',\n        marginRight:'10%'\n    }\n\n    return (\n        <Box\n            width=\"auto\"\n            height={window.innerHeight-100}\n            // height=\"100%\"\n            overflow=\"hidden\"\n            bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\n            pt='5'  \n           \n                    \n        >                   \n                <Link href='/customerdashboard'> <Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}>Dashboard </Button> </Link>     \n          \n                <Link href='/allorders'> <Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}> My Orders  </Button> </Link>     \n         \n                <Link href='/carddetails'> <Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}> Card & Bank Details  </Button></Link>     \n            \n                <Link href='/shippingaddress'><Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}> Shipping Address </Button></Link>     \n         \n                <Link href='/changepersonaldet'><Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}>Change Account Details </Button></Link>     \n           \n        </Box>\n    )\n}\n\nexport default CustomerDashSideBar\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/AddAddress.js",["210"],"import { useState } from 'react';\nimport{\n    FormControl,\n    FormLabel,\n    Input,\n    useToast\n\n} from \"@chakra-ui/react\";\n\nconst AddAddress = ({addAddress,trigger}) => {\n    const [First_Name,setFirstName] = useState('')\n    const [Last_Name,setLastName] = useState('')\n    const [Street,setStreet] = useState('')\n    const [City,setCity] = useState('')\n    const [State,setState] = useState('')\n    const [ZIP,setZip] = useState('')\n\n    const toast = useToast()\n\n\n    const onSubmit = (e)=>{\n        e.preventDefault()\n\n        if(!First_Name || !Last_Name || !Street || !City || !State || !ZIP){\n            alert('Empty Field')\n            return\n        }\n        \n        addAddress({First_Name,Last_Name,Street,City,State,ZIP})\n\n        setFirstName('')\n        setLastName('')\n        setStreet('')\n        setCity('')\n        setState('')\n        setZip('')\n\n        \n    }\n\n    return (\n        <form  onSubmit={onSubmit} >\n            <FormControl>\n                <FormLabel>First Name</FormLabel>\n                <Input type=\"text\" placeholder='Name' value={First_Name} onChange={(e)=>setFirstName(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>Last Name</FormLabel>\n                <Input type=\"text\" placeholder='Telephone' value={Last_Name} onChange={(e)=>setLastName(e.target.value)}  />\n            </FormControl>\n            <FormControl>\n                <FormLabel>Street</FormLabel>\n                <Input type=\"text\" placeholder='Street' value={Street} onChange={(e)=>setStreet(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>City</FormLabel>\n                <Input type=\"text\" placeholder='City' value={City} onChange={(e)=>setCity(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>State</FormLabel>\n                <Input type=\"text\" placeholder='State' value={State} onChange={(e)=>setState(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>Zip</FormLabel>\n                <Input type=\"text\" placeholder='Zip' value={ZIP} onChange={(e)=>setZip(e.target.value)} />\n            </FormControl>\n            <Input mt='5' mb='5'  type=\"submit\" value='Save Address' className='btn btn-block' bg=\"teal.400\" color='white' onClick={trigger} />\n            \n        </form>\n    )\n}\n\nexport default AddAddress\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ChangePasswordForm.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/components/BankCards.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/components/ChangePersonalDetForm.js",["211"],"import {\n    Box,\n    FormControl,\n    FormLabel,\n    Heading,\n    Input,\n    useToast\n  } from \"@chakra-ui/react\";\n\nimport { useState,useEffect } from 'react';\nimport Axios from \"axios\";\n\nconst ChangePersonalDetForm = () => {\n    const [UserID,setUserID] = useState('')\n    const [firstname,setFirstName] = useState('')\n    const [lastname,setLastName] = useState('')\n    const [telephone,setTelephone] = useState('')\n    const [Email,setEmail] = useState('')\n   \n    useEffect(() => {\n        Axios.get(\"http://localhost:5000/customer/user\")\n        .then((Response)=>{\n            console.log(Response.data);\n            setFirstName(Response.data.user[0].First_name);\n            setLastName(Response.data.user[0].Last_name);\n            setTelephone(Response.data.user[0].Phone_No);\n            setEmail(Response.data.user[0].Email);\n            setUserID(Response.data.user[0].UserID);\n            \n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Error loading data\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          }); \n    }, [])\n\n    \n    const toast = useToast()\n\n    const onSubmit = (e)=>{\n        e.preventDefault()\n\n        if(telephone.length!==10){\n            alert(\"Invalid Mobile Number\")\n            return\n        }\n\n\n        Axios.put('http://localhost:5000/customer/user',{UserID,firstname,lastname,telephone,Email})\n        .then((Response)=>{\n            toast({\n                position: \"bottom-right\",    \n                description: \"Successfully Updated the Personal Data\",\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n              })\n        })\n        .catch((err) => {\n            toast({\n                position: \"bottom-right\",    \n                description: \"Internal Server Error. Try again later\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n              })\n          });  \n    }\n\n    console.log(firstname,lastname,telephone,Email)\n\n\n    return (\n        <Box>\n            <Heading size='lg' mb='5'>Change Personal Details</Heading>\n            <form onSubmit={onSubmit} >\n                <FormControl id=\"firstname\" mb='8'>\n                    <FormLabel>First Name</FormLabel>\n                                \n                        <Input   \n                            type='text'  \n                            placeholder='First Name'       \n                            defaultValue={firstname}\n                            name='firstname'\n                            onChange={(e)=>setFirstName(e.target.value)}\n                            required\n                        />\n                </FormControl>\n\n                <FormControl id=\"lastname\" mb='8'>\n                    <FormLabel>Last Name</FormLabel>\n                                \n                        <Input \n                            type='text'  \n                            placeholder='Last Name'  \n                            defaultValue={lastname} \n                            name='lastname'\n                            onChange={(e)=>setLastName(e.target.value)}\n                            required\n                        />\n                </FormControl>\n\n                <FormControl id=\"email\" mb='8'>\n                    <FormLabel>Email</FormLabel>\n                                \n                        <Input   \n                            type='email'\n                            placeholder='Email'  \n                            defaultValue={Email} \n                            name='Email'\n                            onChange={(e)=>setEmail(e.target.value)}\n                            required\n                        />\n                </FormControl>\n\n                <FormControl id=\"tel\" mb='8'>\n                    <FormLabel>Telephone Number</FormLabel>\n                                \n                        <Input   \n                            type='number'\n                            placeholder='Telephone Number'       \n                            defaultValue={telephone}\n                            name='telephone'\n                            onChange={(e)=>setTelephone(e.target.value)}\n                            required\n                        />\n                </FormControl>\n\n                <Input mt='2' mb='2'  type=\"submit\" value='Update Details' className='btn btn-block' bg=\"teal.600\" color='white'  />\n                            \n\n\n\n\n\n            </form>\n        </Box>\n    )\n}\n\nexport default ChangePersonalDetForm\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/OrderTiles.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/components/AddBankCard.js",["212","213"],"import { useState } from 'react';\nimport{\n    FormControl,\n    FormLabel,\n    Input,\n    useToast\n\n} from \"@chakra-ui/react\";\n\nconst AddBankCard = ({addBankCard,trigger}) => {\n    const [Card_Number,setCardNumber] = useState('')\n    const [Owner,setOwner] = useState('')\n    const [CVV,setCvv] = useState('')\n    const [Exp_Date,setExpDate] = useState('')\n    const [Bank_Name,setBankName] = useState('')\n    const onSubmit = (e)=>{\n        e.preventDefault()\n\n        if(!Card_Number || !Owner || !CVV || !Exp_Date || !Bank_Name){\n            alert('Empty Field')\n            return\n        }\n\n        if(Card_Number.toString().length!==12){\n            alert('Invalid Card Number')\n            return\n        }\n    \n        var givenDate = new Date(Exp_Date);\n        var today = new Date();\n        if (givenDate.getFullYear() < today.getFullYear()) {\n            alert('card is expired')\n            return\n        }\n        else if (givenDate.getFullYear() == today.getFullYear()){\n            if(givenDate.getMonth() < today.getMonth()){\n                alert('card is expired')\n                return\n            }\n        }\n    \n        \n        addBankCard({Card_Number,Owner,CVV,Exp_Date,Bank_Name})\n\n        setCardNumber('')\n        setOwner('')\n        setCvv('')\n        setExpDate('')\n        setBankName('')\n        \n        \n    }\n\n    return (\n        <form  onSubmit={onSubmit} >\n            <FormControl>\n                <FormLabel>Bank Number</FormLabel>\n                <Input type=\"text\" placeholder='Bank Name' value={Bank_Name} onChange={(e)=>setBankName(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>Card Number</FormLabel>\n                <Input type=\"number\" placeholder='Card Number' value={Card_Number} onChange={(e)=>setCardNumber(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>Owner</FormLabel>\n                <Input type=\"text\" placeholder='Owner' value={Owner} onChange={(e)=>setOwner(e.target.value)}  />\n            </FormControl>\n            <FormControl>\n                <FormLabel>CVV</FormLabel>\n                <Input type=\"number\" placeholder='CVV' value={CVV} onChange={(e)=>setCvv(e.target.value)} />\n            </FormControl>\n            <FormControl>\n                <FormLabel>Exp Date</FormLabel>\n                <Input type=\"month\" placeholder='Exp Date' value={Exp_Date} onChange={(e)=>setExpDate(e.target.value)} />\n            </FormControl>\n            <Input mt='5' mb='5'  type=\"submit\" value='Save Card Details' className='btn btn-block' bg=\"teal.400\" color='white' onClick={trigger} />\n            \n        </form>\n    )\n}\n\nexport default AddBankCard\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/CategorizedReviewPreview.js",["214"],"import { StarIcon } from \"@chakra-ui/icons\";\nimport {\n  HStack,\n  Text,\n  Avatar,\n  Box,\n  useColorMode,\n  Heading,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport Replys from \"./Replys\";\n\nfunction CategorizedReviewPreview(props) {\n  const { colorMode, toggleColorMode } = useColorMode();\n  var reviews = [];\n\n  var stars = (rating) => {\n    return Array(5)\n      .fill(\"\")\n      .map((_, j) => (\n        <StarIcon key={j} color={j < rating ? \"cyan.500\" : \"cyan.300\"} />\n      ));\n  };\n\n  for (var i = 0; i < props.feedbacks.length; i++) {\n    if (props.feedbacks[i].rating === props.rating || props.rating === 'all') {\n      reviews.push(\n        <Box mb='10px'>\n          <HStack>\n            <Avatar\n              name={props.feedbacks[i].customer_name}\n              src={props.feedbacks[i].customer_dp}\n            />\n            <Box\n              w=\"100%\"\n              borderWidth=\"2px\"\n              borderRadius=\"lg\"\n              p=\"10px\"\n              bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.500\"}\n            >\n              <Heading as=\"h5\" size=\"sm\">\n                {props.feedbacks[i].customer_name}\n              </Heading>\n              <Text>{props.feedbacks[i].comment}</Text>\n              <Box d=\"flex\" mt=\"2\" ml=\"2px\" alignItems=\"center\">\n                {stars(props.feedbacks[i].rating)}\n                <Box as=\"span\" ml=\"2\" fontSize=\"sm\">\n                  {props.feedbacks[i].rating}/5\n                </Box>\n              </Box>\n            </Box>\n          </HStack>\n          <Replys replys={props.feedbacks[i].reply} />\n        </Box>\n      );\n    }\n  }\n\n  if (reviews.length === 0) {\n    reviews.push(<Text>No reviews</Text>);\n  }\n\n  return <>{reviews}</>;\n}\n\nexport default CategorizedReviewPreview;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ReviewCountPreview.js",["215","216","217","218","219","220","221","222"],"import { StarIcon } from \"@chakra-ui/icons\";\nimport {\n  HStack,\n  Text,\n  Avatar,\n  Box,\n  useColorMode,\n  Heading,\n  VStack,\n  Progress,\n  Stack,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport Replys from \"./Replys\";\n\nfunction ReviewCountPreview(props) {\n  const { colorMode, toggleColorMode } = useColorMode();\n  var reviews = [];\n\n  const total_reviews = props.feedbacks.length;\n\n  var s5 = 0;\n  var s4 = 0;\n  var s3 = 0;\n  var s2 = 0;\n  var s1 = 0;\n\n  for (var i = 0; i < props.feedbacks.length; i++) {\n    if (props.feedbacks[i].rating === 5) {\n      s5 = s5 + 1;\n    } else if (props.feedbacks[i].rating === 4) {\n      s4 = s4 + 1;\n    } else if (props.feedbacks[i].rating === 3) {\n      s3 = s3 + 1;\n    } else if (props.feedbacks[i].rating === 2) {\n      s2 = s2 + 1;\n    } else if (props.feedbacks[i].rating === 1) {\n      s1 = s1 + 1;\n    }\n  }\n\n  return (\n    <Stack w=\"50vh\" h=\"50vh\" spacing=\"1px\" ml='20px'>\n      <Box w=\"300px\" pb='5px'>\n        <Text fontSize='lg'>\n          5 <StarIcon color=\"cyan.500\" />\n        </Text>\n        <Text fontSize='xs'>\n            {s5} reviews\n        </Text>\n        <Progress value={(s5 / total_reviews) * 100} />\n      </Box>\n\n      <Box w=\"300px\" pb='5px'>\n        <Text fontSize='lg'>\n          4 <StarIcon color=\"cyan.500\" />\n        </Text>\n        <Text fontSize='xs'>\n            {s4} reviews\n        </Text>\n        <Progress value={(s4 / total_reviews) * 100} />\n      </Box>\n\n      <Box w=\"300px\" pb='5px'>\n        <Text fontSize='lg'>\n          3 <StarIcon color=\"cyan.500\" />\n        </Text>\n        <Text fontSize='xs'>\n            {s3} reviews\n        </Text>\n        <Progress value={(s3 / total_reviews) * 100} />\n      </Box>\n      <Box w=\"300px\" pb='5px'>\n        <Text fontSize='lg'>\n          2 <StarIcon color=\"cyan.500\" />\n        </Text>\n        <Text fontSize='xs'>\n            {s2} reviews\n        </Text>\n        <Progress value={(s2 / total_reviews) * 100} />\n      </Box>\n      <Box w=\"300px\" pb='5px'>\n        <Text fontSize='lg'>\n          1 <StarIcon color=\"cyan.500\" />\n        </Text>\n        <Text fontSize='xs'>\n            {s1} reviews\n        </Text>\n        <Progress value={(s1 / total_reviews) * 100} />\n      </Box>\n    </Stack>\n  );\n}\n\nexport default ReviewCountPreview;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/SearchBar.js",[],"/Users/pasanmadushan/Desktop/Front-end-react/src/components/ProductCard.js",["223","224","225","226","227","228","229","230"],"import { StarIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Text,\n  useColorMode,\n  Avatar,\n  AvatarBadge,\n  HStack,\n  VStack,\n  Heading,\n  Image,\n  Badge,\n  Img,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nfunction ProductCard(props) {\n  return (\n    <Box maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\n      <Img src={props.imageUrl} alt={props.imageAlt} w='230px' h='250px' />\n\n      <Box p=\"6\">\n      <Badge\n            borderRadius=\"full\"\n            px=\"2\"\n            colorScheme='yellow'\n            variant=\"outline\" \n            fontSize='9px'\n          >\n            {props.category}\n          </Badge>\n        <Box fontWeight=\"semibold\" as=\"h4\" lineHeight=\"tight\" fontSize='xl' isTruncated>\n          {props.title}\n        </Box>\n       \n        <Box>\n          <Text color=\"gray.600\" fontSize=\"3xl\">\n            Rs. {props.price}\n          </Text>\n        </Box>\n\n        <Box d=\"flex\" alignItems=\"baseline\" mt=\"1\">\n          <Badge\n            borderRadius=\"full\"\n            px=\"2\"\n            colorScheme={props.status === \"Available\" ? \"green\" : \"red\"}\n          >\n            {props.status}\n          </Badge>\n          <Box\n            color=\"gray.500\"\n            fontWeight=\"semibold\"\n            letterSpacing=\"wide\"\n            fontSize=\"xs\"\n            textTransform=\"uppercase\"\n            ml=\"2\"\n          >\n            {props.orders} Orders\n          </Box>\n        </Box>\n\n       \n        <Box d=\"flex\" mt=\"2\" alignItems=\"center\">\n          {Array(5)\n            .fill(\"\")\n            .map((_, i) => (\n              <StarIcon\n                key={i}\n                color={i < props.rating ? \"cyan.800\" : \"gray.300\"}\n              />\n            ))}\n          <Box as=\"span\" ml=\"2\" color=\"gray.600\" fontSize=\"sm\">\n            {props.reviews} reviews\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default ProductCard;\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/BankCard.js",["231","232","233","234","235","236","237","238"],"import {React, useState} from 'react'\nimport {\n    Box,\n    Button,\n    GridItem,\n    useColorMode,\n    useDisclosure,\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    PopoverHeader,\n    PopoverBody,\n    PopoverFooter,\n    PopoverArrow,\n    PopoverCloseButton,\n    ButtonGroup,\n    Heading,\n    HStack,\n    Spacer,\n    Image\n  } from \"@chakra-ui/react\";\n\nimport { ImUser,ImPhone, ImLocation } from \"react-icons/im\";\n\n\nconst BankCard = ({bankcard,deleteBankCard}) => {\n\n    const { isOpen, onOpen, onClose } = useDisclosure()\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    \n\n    // const [data, setData] = useState({\n    //     cardNumber:bankcard.card_number,\n    //     owner:bankcard.owner,\n    //     cvv:bankcard.cvv,\n    //     expDate:bankcard.expDate\n    // })\n    \n\n    // const handleChange =  (event) => {\n    //     var value = event.target.value;\n    //     var name = event.target.name;\n\n    //     setData({ ...data, [event.target.name]: value })\n    //     // console.log(data)\n    // };\n\n\n    return(\n        <GridItem>\n        <Box  \n            bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\n            borderRadius='md'\n            border='1px'\n            borderColor='cyan.600'\n            p='6'\n            m='4'\n            pb='3'\n           \n            >\n\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n                    \n                    <Box\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                        letterSpacing=\"wide\"\n                        fontSize=\"lg\"       \n                        ml=\"2\"\n                    >\n                       <Heading size='lg'> x x x x  x x x x {bankcard.Card_Number.toString().substr(8,13)} </Heading>\n                    </Box>\n                </Box> \n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n                \n                   \n                    <Box\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                        letterSpacing=\"wide\"\n                        fontSize=\"md\"       \n                        ml=\"2\"\n                       \n                    >\n                        { bankcard.Owner }\n                    </Box>\n                </Box> \n               \n               <HStack mb='4'>\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n                \n                    <Box\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                        letterSpacing=\"wide\"\n                        fontSize=\"md\"       \n                        ml=\"2\"\n                    >\n                        {bankcard.Exp_Date}\n                    </Box>\n                </Box> \n                <Spacer />\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n                <Image\n                    width='70px'\n                    src=\"../visa.png\"\n                    />\n                </Box> \n                </HStack>\n\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n\n                 \n                    {/* Delete Address */}\n                \n                    <Popover>\n                        <PopoverTrigger>\n                        <Button colorScheme=\"red\" size=\"xs\"  > Delete</Button> \n                        </PopoverTrigger>\n                        <PopoverContent>\n                            <PopoverHeader fontWeight=\"semibold\">Delete Card Details</PopoverHeader>\n                            <PopoverArrow />\n                            <PopoverCloseButton />\n                            <PopoverBody>\n                            Are you sure you want to delete card details?\n                            </PopoverBody>\n                            <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\n                                <ButtonGroup size=\"sm\">\n                                    <Button colorScheme=\"red\" onClick={()=>{deleteBankCard(bankcard.Card_Number)}}>Delete</Button>\n                                </ButtonGroup>\n                            </PopoverFooter>\n                            </PopoverContent>\n                            </Popover>                   \n                </Box>\n\n        </Box>\n        </GridItem>\n    )\n}\n\nexport default BankCard\n\n\n\n    ","/Users/pasanmadushan/Desktop/Front-end-react/src/components/ShipAddress.js",["239","240","241","242","243","244","245"],"import {React, useState} from 'react'\nimport {\n    Box,\n    Button,\n    GridItem,\n    useColorMode,\n    useDisclosure,\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    PopoverHeader,\n    PopoverBody,\n    PopoverFooter,\n    PopoverArrow,\n    PopoverCloseButton,\n    ButtonGroup,\n  } from \"@chakra-ui/react\";\n\nimport { ImUser,ImPhone, ImLocation } from \"react-icons/im\";\n\n\nconst ShipAddress = ({address,deleteAddress,updateAddress}) => {\n\n    const { isOpen, onOpen, onClose } = useDisclosure()\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    // const [data, setData] = useState({\n    //     id: address.Address_ID,\n    //     name: address.First_Name + address.Last_Name,\n    //     tp: address.tp,\n    //     street: address.Street,\n    //     city: address.City,\n    //     state: address.State,\n    //     zip: address.ZIP,\n    // })\n    \n    // const handleSubmit = (e)=>{\n    //     e.preventDefault()\n    //     // console.log('---------handlesubmit data--------')\n    //     // console.log(data)\n    //     updateAddress(data)\n        \n    //     // updateAddress(address.id)\n    // }\n\n    // const handleChange =  (event) => {\n    //     var value = event.target.value;\n    //     var name = event.target.name;\n\n    //     setData({ ...data, [event.target.name]: value })\n    //     // console.log(data)\n    // };\n\n\n    return(\n        <GridItem>\n        <Box  \n            bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\n            borderRadius='md'\n            border='1px'\n            borderColor='cyan.600'\n            p='6'\n            m='4'\n            pb='3'\n           \n            >\n\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n                    <ImUser />\n                    <Box\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                        letterSpacing=\"wide\"\n                        fontSize=\"lg\"       \n                        ml=\"2\"\n                    >\n                        { address.First_Name +\" \" +  address.Last_Name }\n                    </Box>\n                </Box> \n                {/* <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n                \n                    <ImPhone color='cyan.600'/>\n                    <Box\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                        letterSpacing=\"wide\"\n                        fontSize=\"md\"       \n                        ml=\"2\"\n                    >\n                        { address.tp }\n                    </Box>\n                </Box>  */}\n\n                <Box d=\"flex\" alignItems=\"baseline\" mt='2' mb='5'>\n                \n                    <ImLocation m='3'/>\n                    <Box\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\n                        letterSpacing=\"wide\"\n                        fontSize=\"md\"       \n                        ml=\"2\"\n                    >\n                        <Box>{ address.Street }</Box>\n                        <Box>{ address.City }</Box>\n                        <Box>{ address.State }</Box>\n                        <Box>{ address.ZIP }</Box>\n                    </Box>\n                </Box> \n               \n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\n\n                    {/* Delete Address */}\n                \n                    <Popover>\n                        <PopoverTrigger>\n                        <Button colorScheme=\"red\" size=\"xs\"  > Delete</Button> \n                        </PopoverTrigger>\n                        <PopoverContent>\n                            <PopoverHeader fontWeight=\"semibold\">Delete Shipping Address</PopoverHeader>\n                            <PopoverArrow />\n                            <PopoverCloseButton />\n                            <PopoverBody>\n                            Are you sure you want to delete the shipping address?\n                            </PopoverBody>\n                            <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\n                                <ButtonGroup size=\"sm\">\n                                    <Button colorScheme=\"red\" onClick={()=>{deleteAddress(address.Address_ID)}}>Delete</Button>\n                                </ButtonGroup>\n                            </PopoverFooter>\n                            </PopoverContent>\n                            </Popover>                   \n                </Box>\n\n        </Box>\n        </GridItem>\n    )\n}\n\nexport default ShipAddress\n\n\n\n\n\n\n                    {/* {/* Edit Address \n\n                     <Button colorScheme=\"teal\" size=\"xs\" mr='2' onClick={onOpen} >\n                        Edit\n                    </Button> \n                    {/* Edit modal */}\n                    // <Modal onClose={onClose} isOpen={isOpen} isCentered>\n                    //     <ModalOverlay />\n                    //     <ModalContent>\n                    //         <ModalHeader>Edit shipping address</ModalHeader>\n                    //             <ModalCloseButton />\n                           \n                        // <form onSubmit={handleSubmit}>\n                        //     <ModalBody>\n                            \n                        //     <FormControl id=\"name\" > */}\n                        //         <FormLabel>Name</FormLabel>\n                                \n                        //         <Input   \n                        //         placeholder='Name'       \n                        //         value={data.name}\n                        //         name='name'\n                        //         onChange={(event) => handleChange(event)}\n                        //         />\n                        //     </FormControl>\n\n                        //     <FormControl id=\"tp\" >\n                        //         <FormLabel>Telephone</FormLabel>\n                        //         <Input \n                        //         placeholder=\"Telephone\" \n                            //     value={data.tp}\n                            //     name='tp'\n                            //     onChange={(event) => handleChange(event)}  />\n                            // </FormControl>\n\n                            // <FormControl id=\"street\" >\n                            //     <FormLabel>Street</FormLabel>\n                            //     <Input \n                            //     placeholder=\"street\" \n                            //     value={data.street}\n                            //     name='street'\n                            //     onChange={(event) => handleChange(event)} />\n                            // </FormControl>\n                            // <FormControl id=\"city\" >\n                            //     <FormLabel>City</FormLabel>\n                            //     <Input placeholder=\"city\" \n                            //     value={data.city}\n                            //     name='city'\n                            //     onChange={(event) => handleChange(event)} />\n                            // </FormControl>\n                            // <FormControl id=\"state\" >\n                            //     <FormLabel>State</FormLabel>\n                    //             <Input placeholder=\"state\" \n                    //             value={data.state}\n                    //             name='state'\n                    //             onChange={(event) => handleChange(event)}\n                    //             />\n                    //         </FormControl>\n                    //         <FormControl id=\"zip\" >\n                    //             <FormLabel>Zip</FormLabel>\n                    //             <Input placeholder=\"zip\" \n                    //             value={data.zip}\n                    //             name='zip'\n                    //             onChange={(event) => handleChange(event)}\n                    //             />\n                    //         </FormControl>\n                           \n                               \n                    //         </ModalBody>\n                    //         <ModalFooter>\n                    //         <Input mt='2' mb='2'  type=\"submit\" value='Update' className='btn btn-block' bg=\"teal.400\" color='white' onClick={onClose} />\n                    //             {/* <Button colorScheme=\"green\"  onClick={trigger} >Update</Button>                               */}\n                    //         </ModalFooter>\n                    //     </form>\n                    //     </ModalContent>\n                    // </Modal> */}\n\n    ","/Users/pasanmadushan/Desktop/Front-end-react/src/components/OrderTile.js",["246","247","248"],"\nimport {\n    Box,\n    Grid,\n    GridItem,\n    useColorMode,\n    SimpleGrid,\n    Heading,\n    Text,\n    Image,\n    HStack,\n    Badge,\n    Button,\n    VStack,\n    Link,\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    PopoverHeader,\n    PopoverArrow,\n    PopoverBody,\n    PopoverCloseButton,\n    PopoverFooter,\n    ButtonGroup\n  } from \"@chakra-ui/react\";\n\nconst OrderTile = ({order,cancelOrder,confirmOrder}) => {\n\n    const { colorMode, toggleColorMode } = useColorMode();\n// try with normal functions\n    const StatusBadge = ({status})=>{\n        if(status==='shipped'){\n            return (<Badge colorScheme=\"green\">Shipped</Badge>)\n        }\n        else if (status==='preparing'){\n            return (<Badge colorScheme=\"yellow\">Preparing</Badge>)\n        }\n        else if (status==='cancelled'){\n            return (<Badge colorScheme=\"red\">Cancelled</Badge>)\n        }\n        else if (status==='received'){\n            return (<Badge colorScheme=\"gray.100\">received</Badge>)\n        }\n        else if (status==='await_cancel'){\n            return  (<Badge colorScheme=\"yellow\">Await Cancel</Badge>)\n        }\n        else{\n            return <div></div>\n        }\n    }    \n\n    const OrderActions = ({status})=>{\n        if(status=='shipped'){\n            return (<VStack>\n                <Link href={\"https://parcelsapp.com/en/tracking/\"+order.trackingNumber} isExternal><Button colorScheme='teal' size='xs'>Track Order</Button></Link>\n                <Button colorScheme='teal' size='xs' onClick={()=>{confirmOrder(order.orderID)}}>Confirm Received</Button>\n            </VStack>)\n        }\n        else if (status=='preparing'){\n            return (\n            <Box>\n                \n                <Popover>\n                        <PopoverTrigger>\n                        <Button colorScheme='teal' size='xs'  >Cancel Order</Button>\n                        </PopoverTrigger>\n                        <PopoverContent>\n                            <PopoverHeader textAlign='left' fontWeight=\"semibold\">Cancel the order</PopoverHeader>\n                            <PopoverArrow />\n                            <PopoverCloseButton />\n                            <PopoverBody textAlign='center'>\n                            Are you really want to cancel the order\n                            </PopoverBody>\n                            <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\n                                <ButtonGroup size=\"sm\">\n                                    <Button colorScheme=\"red\" onClick={()=>{cancelOrder(order.orderID)}}>Cancel Order</Button>\n                                </ButtonGroup>\n                            </PopoverFooter>\n                            </PopoverContent>\n                            </Popover>                  \n                </Box>\n            )\n        }\n        else{\n            return <div></div>\n        }\n    }\n\n    return (\n        <Box bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}  m='5' color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}>\n            <Grid>\n                <GridItem p='2' bg={colorMode === \"light\" ? \"teal.500\" : \"teal.50\"} color={colorMode === \"light\" ? \"teal.50\" : \"teal.500\"} >\n                    <SimpleGrid columns={3} textAlign='center'>\n                        <Box>\n                            <Heading as='h6' size='xs'>Order ID</Heading>\n                            <Text>{order.orderID}</Text>\n                        </Box>\n                        <Box>\n                            <Heading as='h6' size='xs'>Order Date</Heading>\n                            <Text>{order.orderedDate}</Text>\n                        </Box>\n                        <Box>\n                            <Heading as='h6' size='xs'>Order Amount</Heading>\n                            <Text>{order.orderAmount}</Text>\n                        </Box>\n                    </SimpleGrid>\n\n                </GridItem>\n                <GridItem p='2'  color={colorMode === \"light\" ? \"teal.800\" : \"teal.50\"} >\n\n                    <SimpleGrid columns={3} p='2'>\n                        <HStack>\n                            <Image\n                                boxSize=\"80px\"\n                                objectFit=\"cover\"\n                                src={order.orderItemImage}\n                                alt={order.orderItemImage}\n                            />\n                            <Heading as='h6' size='xs'>{order.orderItemTitle}</Heading>\n                        </HStack>\n                        <Box textAlign='center'>\n                           <StatusBadge  status={order.orderStatus}/>\n                        </Box>\n                        <Box textAlign='center'>\n                            {/* {order.status==='shipped'?(\n                       <Box>    {console.log(\"shipped\")}\n             <Button colorScheme='teal' size='xs'>Track Order</Button>\n                <Button colorScheme='teal' size='xs'>Confirm Received</Button>\n                                </Box>\n            ):(<Box><Button colorScheme='teal' size='xs'  onClick={()=>{cancelOrder(order.orderID)}}>Cancel Order</Button></Box>)} */}\n                             <OrderActions status={order.orderStatus}/> \n                           \n                        </Box>\n                    </SimpleGrid>\n\n                </GridItem>\n             \n\n            </Grid>\n        </Box>\n    )\n}\n\nexport default OrderTile\n","/Users/pasanmadushan/Desktop/Front-end-react/src/components/Replys.js",["249"],"import {\n  Box,\n  Text,\n  useColorMode,\n  Avatar,\n  HStack,\n  VStack,\n  Heading,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\nfunction Replys(props) {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const dp = \"\";\n\n  var replys = [];\n  for (var i = 0; i < props.replys.length; i++) {\n    replys.push(\n      <HStack spacing=\"10px\" w=\"100%\">\n        <Avatar name=\"Electrica\" src={dp} size=\"sm\" />\n        <Box\n          w=\"100%\"\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          p=\"10px\"\n          mt=\"20px\"\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.500\"}\n        >\n        <Heading  as=\"h5\" size=\"sm\">Electrica</Heading>\n          <Text>{props.replys[i]}</Text>\n        </Box>\n      </HStack>\n    );\n  }\n\n  return (\n    <Box ml=\"100px\" mt='10px'>\n      <VStack w=\"100%\">{replys}</VStack>\n    </Box>\n  );\n}\n\nexport default Replys;\n",{"ruleId":"250","replacedBy":"251"},{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","severity":1,"message":"255","line":6,"column":5,"nodeType":"256","messageId":"257","endLine":6,"endColumn":12},{"ruleId":"254","severity":1,"message":"258","line":15,"column":10,"nodeType":"256","messageId":"257","endLine":15,"endColumn":19},{"ruleId":"254","severity":1,"message":"259","line":16,"column":8,"nodeType":"256","messageId":"257","endLine":16,"endColumn":14},{"ruleId":"260","severity":1,"message":"261","line":47,"column":8,"nodeType":"262","endLine":47,"endColumn":10,"suggestions":"263"},{"ruleId":"254","severity":1,"message":"264","line":84,"column":24,"nodeType":"256","messageId":"257","endLine":84,"endColumn":39},{"ruleId":"260","severity":1,"message":"261","line":90,"column":8,"nodeType":"262","endLine":90,"endColumn":10,"suggestions":"265"},{"ruleId":"266","severity":1,"message":"267","line":166,"column":37,"nodeType":"268","messageId":"269","endLine":166,"endColumn":39},{"ruleId":"254","severity":1,"message":"264","line":172,"column":24,"nodeType":"256","messageId":"257","endLine":172,"endColumn":39},{"ruleId":"254","severity":1,"message":"270","line":8,"column":5,"nodeType":"256","messageId":"257","endLine":8,"endColumn":18},{"ruleId":"254","severity":1,"message":"271","line":12,"column":17,"nodeType":"256","messageId":"257","endLine":12,"endColumn":25},{"ruleId":"254","severity":1,"message":"272","line":12,"column":27,"nodeType":"256","messageId":"257","endLine":12,"endColumn":36},{"ruleId":"254","severity":1,"message":"264","line":19,"column":24,"nodeType":"256","messageId":"257","endLine":19,"endColumn":39},{"ruleId":"254","severity":1,"message":"273","line":21,"column":11,"nodeType":"256","messageId":"257","endLine":21,"endColumn":16},{"ruleId":"260","severity":1,"message":"261","line":63,"column":8,"nodeType":"262","endLine":63,"endColumn":10,"suggestions":"274"},{"ruleId":"254","severity":1,"message":"264","line":124,"column":24,"nodeType":"256","messageId":"257","endLine":124,"endColumn":39},{"ruleId":"254","severity":1,"message":"264","line":21,"column":24,"nodeType":"256","messageId":"257","endLine":21,"endColumn":39},{"ruleId":"254","severity":1,"message":"275","line":10,"column":5,"nodeType":"256","messageId":"257","endLine":10,"endColumn":9},{"ruleId":"254","severity":1,"message":"264","line":15,"column":24,"nodeType":"256","messageId":"257","endLine":15,"endColumn":39},{"ruleId":"254","severity":1,"message":"276","line":27,"column":9,"nodeType":"256","messageId":"257","endLine":27,"endColumn":11},{"ruleId":"254","severity":1,"message":"277","line":28,"column":11,"nodeType":"256","messageId":"257","endLine":28,"endColumn":20},{"ruleId":"254","severity":1,"message":"264","line":28,"column":22,"nodeType":"256","messageId":"257","endLine":28,"endColumn":37},{"ruleId":"254","severity":1,"message":"278","line":40,"column":16,"nodeType":"256","messageId":"257","endLine":40,"endColumn":23},{"ruleId":"254","severity":1,"message":"279","line":17,"column":22,"nodeType":"256","messageId":"257","endLine":17,"endColumn":35},{"ruleId":"254","severity":1,"message":"264","line":26,"column":22,"nodeType":"256","messageId":"257","endLine":26,"endColumn":37},{"ruleId":"254","severity":1,"message":"280","line":28,"column":34,"nodeType":"256","messageId":"257","endLine":28,"endColumn":59},{"ruleId":"254","severity":1,"message":"281","line":11,"column":18,"nodeType":"256","messageId":"257","endLine":11,"endColumn":29},{"ruleId":"254","severity":1,"message":"282","line":12,"column":17,"nodeType":"256","messageId":"257","endLine":12,"endColumn":23},{"ruleId":"254","severity":1,"message":"283","line":12,"column":25,"nodeType":"256","messageId":"257","endLine":12,"endColumn":31},{"ruleId":"254","severity":1,"message":"284","line":17,"column":10,"nodeType":"256","messageId":"257","endLine":17,"endColumn":17},{"ruleId":"254","severity":1,"message":"285","line":17,"column":19,"nodeType":"256","messageId":"257","endLine":17,"endColumn":28},{"ruleId":"254","severity":1,"message":"286","line":18,"column":8,"nodeType":"256","messageId":"257","endLine":18,"endColumn":32},{"ruleId":"254","severity":1,"message":"287","line":19,"column":8,"nodeType":"256","messageId":"257","endLine":19,"endColumn":26},{"ruleId":"254","severity":1,"message":"276","line":23,"column":11,"nodeType":"256","messageId":"257","endLine":23,"endColumn":13},{"ruleId":"254","severity":1,"message":"277","line":24,"column":13,"nodeType":"256","messageId":"257","endLine":24,"endColumn":22},{"ruleId":"254","severity":1,"message":"264","line":24,"column":24,"nodeType":"256","messageId":"257","endLine":24,"endColumn":39},{"ruleId":"254","severity":1,"message":"288","line":27,"column":11,"nodeType":"256","messageId":"257","endLine":27,"endColumn":23},{"ruleId":"254","severity":1,"message":"289","line":30,"column":11,"nodeType":"256","messageId":"257","endLine":30,"endColumn":23},{"ruleId":"254","severity":1,"message":"278","line":34,"column":18,"nodeType":"256","messageId":"257","endLine":34,"endColumn":25},{"ruleId":"254","severity":1,"message":"290","line":22,"column":21,"nodeType":"256","messageId":"257","endLine":22,"endColumn":33},{"ruleId":"254","severity":1,"message":"291","line":57,"column":10,"nodeType":"256","messageId":"257","endLine":57,"endColumn":25},{"ruleId":"254","severity":1,"message":"292","line":57,"column":27,"nodeType":"256","messageId":"257","endLine":57,"endColumn":45},{"ruleId":"254","severity":1,"message":"293","line":70,"column":9,"nodeType":"256","messageId":"257","endLine":70,"endColumn":20},{"ruleId":"254","severity":1,"message":"294","line":3,"column":5,"nodeType":"256","messageId":"257","endLine":3,"endColumn":11},{"ruleId":"254","severity":1,"message":"284","line":11,"column":10,"nodeType":"256","messageId":"257","endLine":11,"endColumn":17},{"ruleId":"254","severity":1,"message":"285","line":11,"column":19,"nodeType":"256","messageId":"257","endLine":11,"endColumn":28},{"ruleId":"254","severity":1,"message":"295","line":11,"column":48,"nodeType":"256","messageId":"257","endLine":11,"endColumn":56},{"ruleId":"254","severity":1,"message":"281","line":13,"column":18,"nodeType":"256","messageId":"257","endLine":13,"endColumn":29},{"ruleId":"254","severity":1,"message":"296","line":17,"column":5,"nodeType":"256","messageId":"257","endLine":17,"endColumn":21},{"ruleId":"254","severity":1,"message":"297","line":18,"column":5,"nodeType":"256","messageId":"257","endLine":18,"endColumn":19},{"ruleId":"254","severity":1,"message":"271","line":20,"column":17,"nodeType":"256","messageId":"257","endLine":20,"endColumn":25},{"ruleId":"254","severity":1,"message":"298","line":21,"column":18,"nodeType":"256","messageId":"257","endLine":21,"endColumn":29},{"ruleId":"254","severity":1,"message":"299","line":21,"column":31,"nodeType":"256","messageId":"257","endLine":21,"endColumn":42},{"ruleId":"254","severity":1,"message":"300","line":22,"column":8,"nodeType":"256","messageId":"257","endLine":22,"endColumn":17},{"ruleId":"254","severity":1,"message":"301","line":3,"column":5,"nodeType":"256","messageId":"257","endLine":3,"endColumn":9},{"ruleId":"254","severity":1,"message":"302","line":4,"column":5,"nodeType":"256","messageId":"257","endLine":4,"endColumn":13},{"ruleId":"254","severity":1,"message":"303","line":5,"column":5,"nodeType":"256","messageId":"257","endLine":5,"endColumn":12},{"ruleId":"254","severity":1,"message":"275","line":6,"column":5,"nodeType":"256","messageId":"257","endLine":6,"endColumn":9},{"ruleId":"254","severity":1,"message":"255","line":7,"column":5,"nodeType":"256","messageId":"257","endLine":7,"endColumn":12},{"ruleId":"254","severity":1,"message":"264","line":17,"column":24,"nodeType":"256","messageId":"257","endLine":17,"endColumn":39},{"ruleId":"254","severity":1,"message":"273","line":18,"column":11,"nodeType":"256","messageId":"257","endLine":18,"endColumn":16},{"ruleId":"260","severity":1,"message":"261","line":40,"column":8,"nodeType":"262","endLine":40,"endColumn":10,"suggestions":"304"},{"ruleId":"254","severity":1,"message":"305","line":6,"column":5,"nodeType":"256","messageId":"257","endLine":6,"endColumn":13},{"ruleId":"266","severity":1,"message":"267","line":35,"column":42,"nodeType":"268","messageId":"269","endLine":35,"endColumn":44},{"ruleId":"254","severity":1,"message":"264","line":14,"column":22,"nodeType":"256","messageId":"257","endLine":14,"endColumn":37},{"ruleId":"254","severity":1,"message":"282","line":3,"column":3,"nodeType":"256","messageId":"257","endLine":3,"endColumn":9},{"ruleId":"254","severity":1,"message":"306","line":5,"column":3,"nodeType":"256","messageId":"257","endLine":5,"endColumn":9},{"ruleId":"254","severity":1,"message":"303","line":8,"column":3,"nodeType":"256","messageId":"257","endLine":8,"endColumn":10},{"ruleId":"254","severity":1,"message":"283","line":9,"column":3,"nodeType":"256","messageId":"257","endLine":9,"endColumn":9},{"ruleId":"254","severity":1,"message":"307","line":14,"column":8,"nodeType":"256","messageId":"257","endLine":14,"endColumn":14},{"ruleId":"254","severity":1,"message":"277","line":17,"column":11,"nodeType":"256","messageId":"257","endLine":17,"endColumn":20},{"ruleId":"254","severity":1,"message":"264","line":17,"column":22,"nodeType":"256","messageId":"257","endLine":17,"endColumn":37},{"ruleId":"254","severity":1,"message":"308","line":18,"column":7,"nodeType":"256","messageId":"257","endLine":18,"endColumn":14},{"ruleId":"254","severity":1,"message":"309","line":5,"column":3,"nodeType":"256","messageId":"257","endLine":5,"endColumn":15},{"ruleId":"254","severity":1,"message":"306","line":6,"column":3,"nodeType":"256","messageId":"257","endLine":6,"endColumn":9},{"ruleId":"254","severity":1,"message":"298","line":7,"column":3,"nodeType":"256","messageId":"257","endLine":7,"endColumn":14},{"ruleId":"254","severity":1,"message":"282","line":8,"column":3,"nodeType":"256","messageId":"257","endLine":8,"endColumn":9},{"ruleId":"254","severity":1,"message":"283","line":9,"column":3,"nodeType":"256","messageId":"257","endLine":9,"endColumn":9},{"ruleId":"254","severity":1,"message":"303","line":10,"column":3,"nodeType":"256","messageId":"257","endLine":10,"endColumn":10},{"ruleId":"254","severity":1,"message":"310","line":11,"column":3,"nodeType":"256","messageId":"257","endLine":11,"endColumn":8},{"ruleId":"254","severity":1,"message":"271","line":15,"column":17,"nodeType":"256","messageId":"257","endLine":15,"endColumn":25},{"ruleId":"254","severity":1,"message":"271","line":1,"column":16,"nodeType":"256","messageId":"257","endLine":1,"endColumn":24},{"ruleId":"254","severity":1,"message":"311","line":23,"column":10,"nodeType":"256","messageId":"257","endLine":23,"endColumn":16},{"ruleId":"254","severity":1,"message":"312","line":23,"column":17,"nodeType":"256","messageId":"257","endLine":23,"endColumn":24},{"ruleId":"254","severity":1,"message":"313","line":23,"column":26,"nodeType":"256","messageId":"257","endLine":23,"endColumn":36},{"ruleId":"254","severity":1,"message":"314","line":28,"column":13,"nodeType":"256","messageId":"257","endLine":28,"endColumn":19},{"ruleId":"254","severity":1,"message":"315","line":28,"column":21,"nodeType":"256","messageId":"257","endLine":28,"endColumn":27},{"ruleId":"254","severity":1,"message":"316","line":28,"column":29,"nodeType":"256","messageId":"257","endLine":28,"endColumn":36},{"ruleId":"254","severity":1,"message":"264","line":30,"column":24,"nodeType":"256","messageId":"257","endLine":30,"endColumn":39},{"ruleId":"254","severity":1,"message":"271","line":1,"column":16,"nodeType":"256","messageId":"257","endLine":1,"endColumn":24},{"ruleId":"254","severity":1,"message":"312","line":19,"column":17,"nodeType":"256","messageId":"257","endLine":19,"endColumn":24},{"ruleId":"254","severity":1,"message":"314","line":24,"column":13,"nodeType":"256","messageId":"257","endLine":24,"endColumn":19},{"ruleId":"254","severity":1,"message":"315","line":24,"column":21,"nodeType":"256","messageId":"257","endLine":24,"endColumn":27},{"ruleId":"254","severity":1,"message":"316","line":24,"column":29,"nodeType":"256","messageId":"257","endLine":24,"endColumn":36},{"ruleId":"254","severity":1,"message":"264","line":26,"column":24,"nodeType":"256","messageId":"257","endLine":26,"endColumn":39},{"ruleId":"317","severity":1,"message":"318","line":145,"column":21,"nodeType":"319","messageId":"320","endLine":150,"endColumn":39},{"ruleId":"254","severity":1,"message":"264","line":29,"column":24,"nodeType":"256","messageId":"257","endLine":29,"endColumn":39},{"ruleId":"266","severity":1,"message":"267","line":53,"column":18,"nodeType":"268","messageId":"269","endLine":53,"endColumn":20},{"ruleId":"266","severity":1,"message":"267","line":59,"column":24,"nodeType":"268","messageId":"269","endLine":59,"endColumn":26},{"ruleId":"254","severity":1,"message":"264","line":13,"column":22,"nodeType":"256","messageId":"257","endLine":13,"endColumn":37},"no-native-reassign",["321"],"no-negated-in-lhs",["322"],"no-unused-vars","'Divider' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'Navbar' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toast'. Either include it or remove the dependency array.","ArrayExpression",["323"],"'toggleColorMode' is assigned a value but never used.",["324"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDisclosure' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'toast' is assigned a value but never used.",["325"],"'Text' is defined but never used.","'id' is assigned a value but never used.","'colorMode' is assigned a value but never used.","'setData' is assigned a value but never used.","'setCategories' is assigned a value but never used.","'setActiveCategoryProducts' is assigned a value but never used.","'ButtonGroup' is defined but never used.","'HStack' is defined but never used.","'VStack' is defined but never used.","'AddIcon' is defined but never used.","'MinusIcon' is defined but never used.","'CategorizedReviewPreview' is defined but never used.","'ReviewCountPreview' is defined but never used.","'quantity_inc' is assigned a value but never used.","'quantity_dec' is assigned a value but never used.","'setCartItems' is assigned a value but never used.","'shippingAddress' is assigned a value but never used.","'setShippingAddress' is assigned a value but never used.","'customer_id' is assigned a value but never used.","'Center' is defined but never used.","'StarIcon' is defined but never used.","'FormErrorMessage' is defined but never used.","'FormHelperText' is defined but never used.","'AvatarBadge' is defined but never used.","'AvatarGroup' is defined but never used.","'SearchBar' is defined but never used.","'Grid' is defined but never used.","'GridItem' is defined but never used.","'Heading' is defined but never used.",["326"],"'useToast' is defined but never used.","'Avatar' is defined but never used.","'Replys' is defined but never used.","'reviews' is assigned a value but never used.","'useColorMode' is defined but never used.","'Image' is defined but never used.","'ImUser' is defined but never used.","'ImPhone' is defined but never used.","'ImLocation' is defined but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'onClose' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation",{"desc":"327","fix":"328"},{"desc":"327","fix":"329"},{"desc":"327","fix":"330"},{"desc":"327","fix":"331"},"Update the dependencies array to be: [toast]",{"range":"332","text":"333"},{"range":"334","text":"333"},{"range":"335","text":"333"},{"range":"336","text":"333"},[1212,1214],"[toast]",[2140,2142],[1517,1519],[1197,1199]]
