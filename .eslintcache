[{"F:\\DB_Project\\Front-end-react\\src\\index.js":"1","F:\\DB_Project\\Front-end-react\\src\\App.js":"2","F:\\DB_Project\\Front-end-react\\src\\pages\\Home.js":"3","F:\\DB_Project\\Front-end-react\\src\\pages\\SpecficProductPage.js":"4","F:\\DB_Project\\Front-end-react\\src\\pages\\CartPage.js":"5","F:\\DB_Project\\Front-end-react\\src\\pages\\FeedbackPage.js":"6","F:\\DB_Project\\Front-end-react\\src\\pages\\CategoryPage.js":"7","F:\\DB_Project\\Front-end-react\\src\\pages\\SellerDashboard.js":"8","F:\\DB_Project\\Front-end-react\\src\\components\\Navbar.js":"9","F:\\DB_Project\\Front-end-react\\src\\pages\\TrackOrder.js":"10","F:\\DB_Project\\Front-end-react\\src\\pages\\CustomerDashboard.js":"11","F:\\DB_Project\\Front-end-react\\src\\pages\\AllOrders.js":"12","F:\\DB_Project\\Front-end-react\\src\\pages\\CustomerAdress.js":"13","F:\\DB_Project\\Front-end-react\\src\\pages\\ChangePersonalDet.js":"14","F:\\DB_Project\\Front-end-react\\src\\pages\\CardDetails.js":"15","F:\\DB_Project\\Front-end-react\\src\\components\\ReviewCountPreview.js":"16","F:\\DB_Project\\Front-end-react\\src\\components\\CategorizedReviewPreview.js":"17","F:\\DB_Project\\Front-end-react\\src\\components\\SearchBar.js":"18","F:\\DB_Project\\Front-end-react\\src\\components\\ProductCard.js":"19","F:\\DB_Project\\Front-end-react\\src\\components\\CustomerDashSideBar.js":"20","F:\\DB_Project\\Front-end-react\\src\\components\\AddAddress.js":"21","F:\\DB_Project\\Front-end-react\\src\\components\\OrderTiles.js":"22","F:\\DB_Project\\Front-end-react\\src\\components\\ShipAddressses.js":"23","F:\\DB_Project\\Front-end-react\\src\\components\\ChangePersonalDetForm.js":"24","F:\\DB_Project\\Front-end-react\\src\\components\\AddBankCard.js":"25","F:\\DB_Project\\Front-end-react\\src\\components\\ChangePasswordForm.js":"26","F:\\DB_Project\\Front-end-react\\src\\components\\BankCards.js":"27","F:\\DB_Project\\Front-end-react\\src\\components\\Replys.js":"28","F:\\DB_Project\\Front-end-react\\src\\components\\OrderTile.js":"29","F:\\DB_Project\\Front-end-react\\src\\components\\ShipAddress.js":"30","F:\\DB_Project\\Front-end-react\\src\\components\\BankCard.js":"31"},{"size":334,"mtime":1612288754563,"results":"32","hashOfConfig":"33"},{"size":1871,"mtime":1612933771451,"results":"34","hashOfConfig":"33"},{"size":119,"mtime":1612288754563,"results":"35","hashOfConfig":"33"},{"size":8396,"mtime":1612887228909,"results":"36","hashOfConfig":"33"},{"size":11857,"mtime":1612978176669,"results":"37","hashOfConfig":"33"},{"size":4777,"mtime":1612895871855,"results":"38","hashOfConfig":"33"},{"size":5492,"mtime":1612887228909,"results":"39","hashOfConfig":"33"},{"size":2765,"mtime":1612887242049,"results":"40","hashOfConfig":"33"},{"size":3451,"mtime":1612887228907,"results":"41","hashOfConfig":"33"},{"size":1734,"mtime":1612933614962,"results":"42","hashOfConfig":"33"},{"size":6290,"mtime":1612933614908,"results":"43","hashOfConfig":"33"},{"size":8198,"mtime":1612933614357,"results":"44","hashOfConfig":"33"},{"size":6035,"mtime":1612933614845,"results":"45","hashOfConfig":"33"},{"size":3101,"mtime":1612933614779,"results":"46","hashOfConfig":"33"},{"size":4856,"mtime":1612933614623,"results":"47","hashOfConfig":"33"},{"size":2373,"mtime":1612288754562,"results":"48","hashOfConfig":"33"},{"size":1820,"mtime":1612288754561,"results":"49","hashOfConfig":"33"},{"size":620,"mtime":1612551734370,"results":"50","hashOfConfig":"33"},{"size":1997,"mtime":1612551734369,"results":"51","hashOfConfig":"33"},{"size":1864,"mtime":1612933613996,"results":"52","hashOfConfig":"33"},{"size":2640,"mtime":1612933613690,"results":"53","hashOfConfig":"33"},{"size":407,"mtime":1612933614078,"results":"54","hashOfConfig":"33"},{"size":440,"mtime":1612933614301,"results":"55","hashOfConfig":"33"},{"size":3039,"mtime":1612933613910,"results":"56","hashOfConfig":"33"},{"size":2723,"mtime":1612933613755,"results":"57","hashOfConfig":"33"},{"size":1892,"mtime":1612933613874,"results":"58","hashOfConfig":"33"},{"size":359,"mtime":1612933613873,"results":"59","hashOfConfig":"33"},{"size":923,"mtime":1612887228908,"results":"60","hashOfConfig":"33"},{"size":5550,"mtime":1612933614077,"results":"61","hashOfConfig":"33"},{"size":8741,"mtime":1612933614301,"results":"62","hashOfConfig":"33"},{"size":4382,"mtime":1612933613871,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1n5sntt",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"66"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"66"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"66"},"F:\\DB_Project\\Front-end-react\\src\\index.js",[],["146","147"],"F:\\DB_Project\\Front-end-react\\src\\App.js",[],"F:\\DB_Project\\Front-end-react\\src\\pages\\Home.js",[],"F:\\DB_Project\\Front-end-react\\src\\pages\\SpecficProductPage.js",["148","149","150","151"],"import {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Heading,\r\n  HStack,\r\n  IconButton,\r\n  Image,\r\n  SimpleGrid,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n  useColorMode,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { AddIcon, MinusIcon, StarIcon } from \"@chakra-ui/icons\";\r\nimport CategorizedReviewPreview from \"../components/CategorizedReviewPreview\";\r\nimport ReviewCountPreview from \"../components/ReviewCountPreview\";\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\nfunction SpecificProductPage() {\r\n  let { id } = useParams();\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n  const [currentOrder, setCurrentOrder] = useState({ varient: 0, quantity: 0 });\r\n\r\n  const quantity_inc = () => {\r\n    setCurrentOrder({ ...currentOrder, quantity: currentOrder.quantity + 1 });\r\n  };\r\n  const quantity_dec = () => {\r\n    if (currentOrder.quantity > 0)\r\n      setCurrentOrder({ ...currentOrder, quantity: currentOrder.quantity - 1 });\r\n  };\r\n\r\n  const [data, setData] = useState({\r\n    item_ID: \"233d\",\r\n    item_name: \"Electric tooth brush\",\r\n    category: \"electronic\",\r\n    price: 200.0,\r\n    orders: 345,\r\n    description:\r\n      \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n    status: \"Available\",\r\n    feedbacks: [\r\n      {\r\n        customer_name: \"jof hagi\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"asdasds asdasd sad\",\r\n        rating: 4,\r\n        reply: [\"sfsdfsd\", \"Thank you\"],\r\n      },\r\n      {\r\n        customer_name: \"den kali\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"axasxas asdasd sad\",\r\n        rating: 5,\r\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\r\n      },\r\n      {\r\n        customer_name: \"gendi gahnadi\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"hgfhf dghhdgf dfgshssdd\",\r\n        rating: 2,\r\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\r\n      },\r\n      {\r\n        customer_name: \"den kali\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"axasxas asdasd sad\",\r\n        rating: 2,\r\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\r\n      },\r\n    ],\r\n    variants: [\r\n      {\r\n        varient_name: \"white 2 brushes\",\r\n        image:\r\n          \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\r\n        color: \"green\",\r\n        details: \"\",\r\n        Quantity: 450,\r\n      },\r\n      {\r\n        varient_name: \"pink 2 brushes with bateries\",\r\n        image:\r\n          \"https://www.powerplanetonline.com/cdnassets/xiaomi_soocas_x3u_sonic_electric_toothbrush_01_rosa_l.jpg\",\r\n        color: \"pink\",\r\n        details: \"\",\r\n        Quantity: 230,\r\n      },\r\n      {\r\n        varient_name: \"two heads only\",\r\n        image:\r\n          \"https://dam.which.co.uk/3b117c36-ca30-49bb-853c-9d31b220a90d.jpg\",\r\n        color: \"blue\",\r\n        details: \"\",\r\n        Quantity: 500,\r\n      },\r\n    ],\r\n  });\r\n\r\n  var imageStack = new Array(data.variants.length)\r\n    .fill(0)\r\n    .map((zero, index) => (\r\n      <Box\r\n        cursor=\"pointer\"\r\n        borderWidth={currentOrder.varient === index ? \"3px\" : \"1px\"}\r\n        borderColor=\"gray.500\"\r\n        onClick={() => setCurrentOrder({ ...currentOrder, varient: index })}\r\n      >\r\n        <Image\r\n          src={data.variants[index].image}\r\n          w=\"100px\"\r\n          h=\"100px\"\r\n          alt=\"image\"\r\n        />\r\n      </Box>\r\n    ));\r\n\r\n  return (\r\n    <Box\r\n      pt=\"150px\"\r\n      pl={{ base: \"10px\", sm: \"100px\" }}\r\n      pr={{ base: \"10px\", sm: \"100px\" }}\r\n    >\r\n      <Center mb=\"20px\">\r\n        <SearchBar text=\"I'm shopping for\" />\r\n      </Center>\r\n\r\n      <SimpleGrid\r\n        columns={2}\r\n        spacing={5}\r\n        minChildWidth=\"400px\"\r\n        borderWidth=\"2px\"\r\n        borderRadius=\"lg\"\r\n        borderColor=\"gray.300\"\r\n      >\r\n        <Box width=\"auto\" h=\"auto\" overflow=\"hidden\" p=\"5px\">\r\n          <Image\r\n            src={data.variants[currentOrder.varient].image}\r\n            w=\"auto\"\r\n            h=\"auto\"\r\n            alt=\"image\"\r\n            fit\r\n          />\r\n        </Box>\r\n        <Box\r\n          width=\"auto\"\r\n          h=\"auto\"\r\n          overflow=\"hidden\"\r\n          p={{ base: \"5px\", sm: \"20px\" }}\r\n        >\r\n          <Heading as=\"h2\" size=\"2xl\">\r\n            {data.item_name}\r\n          </Heading>\r\n\r\n          <Text fontSize=\"xl\" ml=\"3px\" mt=\"5px\">\r\n            {data.category}\r\n          </Text>\r\n          <Box d=\"flex\" mt=\"2\" ml=\"2px\" alignItems=\"center\">\r\n            {Array(5)\r\n              .fill(\"\")\r\n              .map((_, i) => (\r\n                <StarIcon\r\n                  key={i}\r\n                  color={i < data.feedbacks[0].rating ? \"cyan.500\" : \"cyan.300\"}\r\n                />\r\n              ))}\r\n            <Box as=\"span\" ml=\"2\" fontSize=\"sm\">\r\n              {data.feedbacks.length} reviews &bull; {data.orders} orders\r\n            </Box>\r\n          </Box>\r\n          <Heading as=\"h4\" size=\"md\" mt=\"20px\">\r\n            Varient\r\n          </Heading>\r\n          <HStack mt=\"20px\">{imageStack}</HStack>\r\n          <Heading as=\"h4\" size=\"md\" mt=\"20px\">\r\n            Quantity\r\n          </Heading>\r\n          <HStack mt=\"10px\">\r\n            <IconButton\r\n              size=\"xs\"\r\n              aria-label=\"Search database\"\r\n              icon={<AddIcon />}\r\n              onClick={quantity_inc}\r\n            />\r\n            <Text>{currentOrder.quantity}</Text>\r\n            <IconButton\r\n              size=\"xs\"\r\n              aria-label=\"Search database\"\r\n              icon={<MinusIcon />}\r\n              onClick={quantity_dec}\r\n            />\r\n          </HStack>\r\n\r\n          <HStack mt=\"20px\">\r\n            <Button colorScheme=\"cyan\" color=\"white\" size=\"lg\">\r\n              Buy now\r\n            </Button>\r\n            <Button colorScheme=\"orange\" size=\"lg\" variant=\"outline\">\r\n              Add to cart\r\n            </Button>\r\n          </HStack>\r\n        </Box>\r\n      </SimpleGrid>\r\n      <Box\r\n        width=\"auto\"\r\n        h=\"auto\"\r\n        borderWidth=\"2px\"\r\n        borderRadius=\"lg\"\r\n        borderColor=\"gray.300\"\r\n        overflow=\"hidden\"\r\n        p={{ base: \"5px\", sm: \"20px\" }}\r\n        mt=\"20px\"\r\n        mb=\"10px\"\r\n      >\r\n        <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\r\n          Description\r\n        </Heading>\r\n        <Text fontSize=\"md\" ml=\"3px\" mt=\"5px\">\r\n          {data.description}\r\n        </Text>\r\n      </Box>\r\n      <Box\r\n        width=\"auto\"\r\n        h=\"auto\"\r\n        borderWidth=\"2px\"\r\n        borderRadius=\"lg\"\r\n        borderColor=\"gray.300\"\r\n        overflow=\"hidden\"\r\n        p={{ base: \"5px\", sm: \"20px\" }}\r\n        mt=\"20px\"\r\n        mb=\"100px\"\r\n      >\r\n        <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\r\n          Reviews\r\n        </Heading>\r\n\r\n        <ReviewCountPreview feedbacks={data.feedbacks} />\r\n        <Tabs>\r\n          <TabList>\r\n            <Tab>\r\n              <StarIcon color=\"cyan.500\" /> All\r\n            </Tab>\r\n            <Tab>\r\n              <StarIcon color=\"cyan.500\" /> 5\r\n            </Tab>\r\n            <Tab>\r\n              <StarIcon color=\"cyan.500\" /> 4\r\n            </Tab>\r\n            <Tab>\r\n              <StarIcon color=\"cyan.500\" /> 3\r\n            </Tab>\r\n            <Tab>\r\n              <StarIcon color=\"cyan.500\" /> 2\r\n            </Tab>\r\n            <Tab>\r\n              <StarIcon color=\"cyan.500\" /> 1\r\n            </Tab>\r\n          </TabList>\r\n\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <CategorizedReviewPreview\r\n                feedbacks={data.feedbacks}\r\n                rating=\"all\"\r\n              />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={5} />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={4} />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={3} />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={2} />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <CategorizedReviewPreview feedbacks={data.feedbacks} rating={1} />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SpecificProductPage;\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\CartPage.js",["152","153","154","155","156","157","158"],"F:\\DB_Project\\Front-end-react\\src\\pages\\FeedbackPage.js",["159","160","161","162","163","164","165","166","167","168"],"import {\r\n  Box,\r\n  Center,\r\n  Heading,\r\n  Image,\r\n  SimpleGrid,\r\n  Textarea,\r\n  Text,\r\n  useColorMode,\r\n  Badge,\r\n} from \"@chakra-ui/react\";\r\nimport { Button, ButtonGroup } from \"@chakra-ui/react\";\r\nimport { Stack, HStack, VStack } from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport {\r\n  AddIcon,\r\n  MinusIcon,\r\n  ArrowForwardIcon,\r\n  StarIcon,\r\n} from \"@chakra-ui/icons\";\r\nimport CategorizedReviewPreview from \"../components/CategorizedReviewPreview\";\r\nimport ReviewCountPreview from \"../components/ReviewCountPreview\";\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\nfunction FeedbackPage(props) {\r\n  let { id } = useParams();\r\n\r\n  const [rating, setRating] = useState(2);\r\n\r\n  const [data, setData] = useState({\r\n    item_ID: \"233d\",\r\n    item_name: \"Electric tooth brush\",\r\n    category: \"electronic\",\r\n    price: 200.0,\r\n    orders: 345,\r\n    description:\r\n      \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n    status: \"Available\",\r\n    feedbacks: [\r\n      {\r\n        customer_name: \"jof hagi\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"asdasds asdasd sad\",\r\n        rating: 4,\r\n        reply: [\"sfsdfsd\", \"Thank you\"],\r\n      },\r\n      {\r\n        customer_name: \"den kali\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"axasxas asdasd sad\",\r\n        rating: 5,\r\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\r\n      },\r\n      {\r\n        customer_name: \"gendi gahnadi\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"hgfhf dghhdgf dfgshssdd\",\r\n        rating: 2,\r\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\r\n      },\r\n      {\r\n        customer_name: \"den kali\",\r\n        customer_dp: \"jof hagi\",\r\n        comment: \"axasxas asdasd sad\",\r\n        rating: 2,\r\n        reply: [\"sfsdsddfsd\", \"asdassadasd sadssadasd sadasad\"],\r\n      },\r\n    ],\r\n    variants: [\r\n      {\r\n        varient_name: \"white 2 brushes\",\r\n        image:\r\n          \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\r\n        color: \"green\",\r\n        details: \"\",\r\n        Quantity: 450,\r\n      },\r\n      {\r\n        varient_name: \"pink 2 brushes with bateries\",\r\n        image:\r\n          \"https://www.powerplanetonline.com/cdnassets/xiaomi_soocas_x3u_sonic_electric_toothbrush_01_rosa_l.jpg\",\r\n        color: \"pink\",\r\n        details: \"\",\r\n        Quantity: 230,\r\n      },\r\n      {\r\n        varient_name: \"two heads only\",\r\n        image:\r\n          \"https://dam.which.co.uk/3b117c36-ca30-49bb-853c-9d31b220a90d.jpg\",\r\n        color: \"blue\",\r\n        details: \"\",\r\n        Quantity: 500,\r\n      },\r\n    ],\r\n  });\r\n\r\n  return (\r\n    <Box\r\n      pt=\"150px\"\r\n      pl={{ base: \"10px\", sm: \"100px\" }}\r\n      pr={{ base: \"10px\", sm: \"100px\" }}\r\n    >\r\n      <Center mb=\"20px\">\r\n        <SearchBar text=\"I'm shopping for\" />\r\n      </Center>\r\n      <SimpleGrid\r\n        columns={2}\r\n        spacing={5}\r\n        minChildWidth=\"400px\"\r\n        borderWidth=\"2px\"\r\n        borderRadius=\"lg\"\r\n        borderColor=\"gray.300\"\r\n      >\r\n        <Box width=\"auto\" h=\"auto\" overflow=\"hidden\" p=\"5px\">\r\n          <Image\r\n            src={data.variants[0].image}\r\n            w=\"auto\"\r\n            h=\"auto\"\r\n            alt=\"image\"\r\n            fit\r\n          />\r\n        </Box>\r\n        <Box\r\n          width=\"auto\"\r\n          h=\"auto\"\r\n          overflow=\"hidden\"\r\n          p={{ base: \"5px\", sm: \"20px\" }}\r\n        >\r\n          <Heading as=\"h2\" size=\"2xl\">\r\n            Submit your feedback...\r\n          </Heading>\r\n\r\n          <Text fontSize=\"6xl\">{data.item_name}</Text>\r\n\r\n          <Badge variant=\"outline\" colorScheme=\"yellow\" fontSize='lg'>\r\n            {data.category}\r\n          </Badge>\r\n\r\n          <Box d=\"flex\" mt=\"10\" alignItems=\"center\">\r\n            {Array(5)\r\n              .fill(\"\")\r\n              .map((_, i) => (\r\n                <StarIcon\r\n                  key={i}\r\n                  color={i < rating ? \"cyan.500\" : \"cyan.100\"}\r\n                  onClick={() => setRating(i + 1)}\r\n                  boxSize=\"50px\"\r\n                  cursor=\"pointer\"\r\n                />\r\n              ))}\r\n          </Box>\r\n          <form>\r\n            <Textarea mt=\"30px\" placeholder=\"Type your comment here...\" />\r\n            <Stack direction=\"row\" spacing={4} mt=\"20px\">\r\n              <Button\r\n                loadingText=\"Submitting\"\r\n                type=\"submit\"\r\n                rightIcon={<ArrowForwardIcon />}\r\n                colorScheme=\"teal\"\r\n                variant=\"outline\"\r\n              >\r\n                Leave Feedback\r\n              </Button>\r\n            </Stack>\r\n          </form>\r\n        </Box>\r\n      </SimpleGrid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default FeedbackPage;\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\CategoryPage.js",["169","170","171"],"import {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Grid,\r\n  GridItem,\r\n  Heading,\r\n  useColorMode,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport ProductCard from \"../components/ProductCard\";\r\n\r\nfunction CategoryPage() {\r\n  const [categories, setCategories] = useState([\r\n    \"All categories\",\r\n    \"Phones\",\r\n    \"Smart Watches\",\r\n    \"Tabs\",\r\n    \"Headphones\",\r\n    \"Chargers\",\r\n  ]);\r\n\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const [activeCategory, setActiveCategory] = useState(categories[0]);\r\n  const [activeCategoryProducts, setActiveCategoryProducts] = useState([\r\n    {\r\n      item_ID: \"233d\",\r\n      item_name: \"Electric tooth brush\",\r\n      category: \"electronic\",\r\n      price: 200.0,\r\n      orders: 345,\r\n      reviews:100,\r\n      rating:3,\r\n      description:\r\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n      status: \"Available\",\r\n      image:\r\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\r\n    },\r\n    {\r\n      item_ID: \"34cd\",\r\n      item_name: \"Iphone 8\",\r\n      category: \"electronic\",\r\n      price: 200.0,\r\n      orders: 345,\r\n      reviews:100,\r\n      rating:3,\r\n      description:\r\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n      status: \"Available\",\r\n      image:\r\n        \"../images/iphone.jpg\",\r\n    },\r\n    {\r\n      item_ID: \"34cd\",\r\n      item_name: \"Iphone 8\",\r\n      category: \"electronic\",\r\n      price: 200.0,\r\n      orders: 345,\r\n      reviews:250,\r\n      rating:4,\r\n      description:\r\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n      status: \"Out of stock\",\r\n      image:\r\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\r\n    },\r\n    {\r\n      item_ID: \"34cd\",\r\n      item_name: \"Iphone 8\",\r\n      category: \"electronic\",\r\n      price: 200.0,\r\n      orders: 345,\r\n      reviews:150,\r\n      rating:2,\r\n      description:\r\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n      status: \"Available\",\r\n      image:\r\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\r\n    },\r\n    {\r\n      item_ID: \"34cd\",\r\n      item_name: \"Iphone 8\",\r\n      category: \"electronic\",\r\n      price: 200.0,\r\n      orders: 345,\r\n      reviews:50,\r\n      rating:5,\r\n      description:\r\n        \"dqdasd a sadasd asdasdafsfrgs gsgsg sd gsgsgsdg sdgsdgsdg sdg\",\r\n      status: \"Available\",\r\n      image:\r\n        \"https://b3h2.scene7.com/is/image/BedBathandBeyond/69055867778_imageset?$690$&wid=690&hei=690\",\r\n    },\r\n  ]);\r\n\r\n  var searchBarText = `Search in ${activeCategory}`;\r\n\r\n  const HandleClick = (category) => {\r\n    setActiveCategory(category);\r\n\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      pt=\"150px\"\r\n      pl={{ base: \"10px\", sm: \"100px\" }}\r\n      pr={{ base: \"10px\", sm: \"100px\" }}\r\n    >\r\n      <Center mb='10px'>\r\n        <SearchBar text={searchBarText} />\r\n      </Center>\r\n      <Grid\r\n        templateRows=\"repeat(1, 1fr)\"\r\n        templateColumns=\"repeat(5, 1fr)\"\r\n        gap={0}\r\n        pb='200px'\r\n      >\r\n        <GridItem rowSpan={1} colSpan={1} bg={colorMode === \"light\" ? \"gray.200\" : \"gray.600\"} p=\"10px\">\r\n          <Heading as=\"h3\" size=\"lg\" mb=\"20px\">\r\n            Categories\r\n          </Heading>\r\n          <VStack>\r\n            {Array(categories.length)\r\n              .fill(\"\")\r\n              .map((_, i) =>\r\n                categories[i] === activeCategory ? (\r\n                  <Button\r\n                    w=\"100%\"\r\n                    variant=\"ghost\"\r\n                    colorScheme=\"gray\"\r\n                    isActive\r\n                    onClick={() => HandleClick(categories[i])}\r\n                  >\r\n                    {categories[i]}\r\n                  </Button>\r\n                ) : (\r\n                  <Button\r\n                    w=\"100%\"\r\n                    variant=\"ghost\"\r\n                    colorScheme=\"gray\"\r\n                    onClick={() => HandleClick(categories[i])}\r\n                  >\r\n                    {categories[i]}\r\n                  </Button>\r\n                )\r\n              )}\r\n          </VStack>\r\n        </GridItem>\r\n        <GridItem\r\n          rowSpan={1}\r\n          colSpan={4}\r\n          borderWidth=\"1px\"\r\n          borderColor=\"gray.300\"\r\n          p=\"20px\"\r\n        >\r\n          <Heading as=\"h2\" size=\"2xl\" mb=\"20px\">\r\n            {activeCategory}\r\n          </Heading>\r\n          <Grid h=\"auto\" templateColumns=\"repeat(4, 1fr)\" gap={2}>\r\n            {Array(activeCategoryProducts.length)\r\n              .fill(\"\")\r\n              .map((_, i) => (\r\n                <ProductCard\r\n                  title={activeCategoryProducts[i].item_name}\r\n                  imageUrl={activeCategoryProducts[i].image}\r\n                  itemName= {activeCategoryProducts[i].item_name}\r\n                  category= {activeCategoryProducts[i].category}\r\n                  price= {activeCategoryProducts[i].price}\r\n                  orders= {activeCategoryProducts[i].orders}\r\n                  status={activeCategoryProducts[i].status}\r\n                  rating={activeCategoryProducts[i].rating}\r\n                  reviews={activeCategoryProducts[i].reviews}\r\n                  \r\n                />\r\n              ))}\r\n          </Grid>\r\n        </GridItem>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CategoryPage;\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\SellerDashboard.js",["172","173","174","175","176","177","178","179","180","181","182"],"import {\r\n    Box,\r\n    Center,\r\n    Grid,\r\n    GridItem,\r\n    Heading,\r\n    VStack,\r\n    Input,\r\n    Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { AddIcon, MinusIcon, ArrowForwardIcon, StarIcon } from \"@chakra-ui/icons\";\r\n\r\nimport { Button, ButtonGroup } from \"@chakra-ui/react\"\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    FormErrorMessage,\r\n    FormHelperText,\r\n} from \"@chakra-ui/react\"\r\nimport React, { useState } from \"react\";\r\nimport { Avatar, AvatarBadge, AvatarGroup } from \"@chakra-ui/react\"\r\nimport SearchBar from \"../components/SearchBar\";\r\n\r\nfunction SellerDashboard() {\r\n\r\n    return (\r\n        <Box\r\n            pt=\"150px\"\r\n            align='center'\r\n            pl={{ base: \"10px\", sm: \"100px\" }}\r\n            pr={{ base: \"10px\", sm: \"100px\" }}\r\n        >\r\n\r\n            <Grid\r\n                templateColumns=\"repeat(5, 1fr)\"\r\n                gap={0}\r\n                textAlign='center'\r\n                pb='200px'\r\n                w='800px'\r\n            >\r\n                <GridItem rowSpan={1} colSpan={1} bg=\"gray.300\" p=\"10px\">\r\n                    <Heading as=\"h3\" size=\"lg\" color=\"gray.600\" mb=\"20px\" w='300px'>\r\n                        <Avatar size=\"3xl\" name=\"Segun Adebayo\" src=\"https://bit.ly/sage-adebayo\" marginTop='40px' />\r\n                    </Heading>\r\n                    <VStack>\r\n\r\n                    </VStack>\r\n                </GridItem>\r\n                <GridItem\r\n                    rowSpan={1}\r\n                    colSpan={4}\r\n                    borderWidth=\"1px\"\r\n                    borderColor=\"gray.300\"\r\n                    p=\"20px\"\r\n                >\r\n                    <Heading as=\"h2\" size=\"2xl\" color=\"gray.600\" mb=\"20px\">\r\n                        Account Settings\r\n            </Heading>\r\n                    <FormControl id=\"email\" mt='30px'>\r\n                        <FormLabel>Email address</FormLabel>\r\n                        <Input type=\"email\" />\r\n                        <FormLabel mt='10px'>User Name</FormLabel>\r\n                        <Input type=\"string\" />\r\n                        <FormLabel mt='10px'>Password</FormLabel>\r\n                        <Input type=\"password\" />\r\n                        <FormLabel mt='10px'>Re-Enter Password</FormLabel>\r\n                        <Input type=\"password\" />\r\n                        <Stack direction=\"row\" spacing={4} mt=\"20px\">\r\n                            <Button\r\n                                loadingText=\"Submitting\" type=\"submit\" rightIcon={<ArrowForwardIcon />} colorScheme=\"teal\" variant=\"outline\">\r\n                                Update\r\n  </Button>\r\n                        </Stack>\r\n                    </FormControl>\r\n                </GridItem>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default SellerDashboard;\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\Navbar.js",[],"F:\\DB_Project\\Front-end-react\\src\\pages\\TrackOrder.js",["183","184"],"import React from 'react'\r\nimport { \r\n    Box,\r\n    Grid,\r\n    GridItem,\r\n    Heading,\r\n    Center,\r\n    useColorMode,\r\n    Badge,\r\n    Text\r\n        } from \"@chakra-ui/react\";\r\n\r\nconst TrackOrder = () => {\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n\r\n    return (\r\n        <Box \r\n            pt=\"110px\"\r\n            pl={{ base: \"10px\", sm: \"100px\" }}\r\n            pr={{ base: \"10px\", sm: \"100px\" }}\r\n        >\r\n            <Box mt='20px' mb='20px' p='3' bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}>\r\n                <Center><Heading textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} as='h3' size='md'>Track Your Order</Heading></Center>        \r\n            </Box>\r\n            <Grid\r\n                h=\"600px\"\r\n                templateRows=\"repeat(3, 1fr)\"\r\n                templateColumns=\"repeat(3, 1fr)\"\r\n                gap={4}\r\n            >\r\n                <GridItem colSpan={2}  bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} >\r\n\r\n                <Box p='5'>\r\n                    <Badge mr='3' variant=\"outline\" fontSize='md' colorScheme=\"teal\">\r\n                    Estimated Delivery \r\n                    </Badge>\r\n                   dsdsd\r\n     \r\n                </Box>\r\n\r\n                </GridItem>\r\n\r\n                <GridItem bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} >\r\n\r\n                    <Box p='8'>\r\n                        xdsd\r\n                    </Box>\r\n\r\n                </GridItem>\r\n                <GridItem  rowSpan={2} colSpan={2} bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} />\r\n                <GridItem  bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}/>\r\n            </Grid>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default TrackOrder\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\CustomerDashboard.js",["185","186","187","188","189"],"import {\r\n    Box,\r\n    Grid,\r\n    GridItem, \r\n    Avatar,\r\n    Divider,\r\n    Heading,\r\n    SimpleGrid,\r\n    Text,\r\n    useColorMode\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Navbar from '../components/Navbar';\r\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\r\n\r\n\r\nconst CustomerDashboard = () => {\r\n\r\n    const [userdata, setUserdata] = useState(\r\n        {\r\n            user_id:'12345',\r\n            user_name:'Pasan Madushan',\r\n            image:'https://images.unsplash.com/photo-1553267751-1c148a7280a1?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\r\n            orders:{\r\n                all:12,\r\n                await_pay:15,\r\n                await_ship:35,\r\n                await_del:45,\r\n                delivered:56\r\n            }\r\n        }\r\n    )\r\n    \r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n\r\n    return (\r\n        <Box\r\n        \r\n        pt=\"100px\"\r\n        // pl={{ base: \"10px\", sm: \"100px\" }}\r\n        // pr={{ base: \"10px\", sm: \"100px\" }} \r\n        >\r\n            \r\n            <Grid\r\n            \r\n                templateColumns=\"repeat(5, 1fr)\"\r\n                templateRows=\"repeat(2, 1fr)\"\r\n                \r\n                \r\n            >        \r\n                <GridItem  colSpan={1} rowSpan={2} >\r\n                    <CustomerDashSideBar page=\"dashboard\" />\r\n                </GridItem>\r\n            \r\n                <GridItem colSpan={4} m={5} mt={8}>\r\n                    <Box \r\n                        width=\"auto\"\r\n                        h=\"auto\"\r\n                        \r\n                        overflow=\"hidden\"\r\n                        p=\"10px\"\r\n                        pb=\"5px\"\r\n                        bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\r\n                        borderRadius='10px'\r\n                        >\r\n                        \r\n                        <Grid \r\n                            templateRows=\"repeat(2, 1fr)\"\r\n                            gap={4}\r\n                            \r\n                        >\r\n                            <GridItem p=\"10px\"  >\r\n                                  <SimpleGrid columns={2} spacing={5}>\r\n                                        <Box >\r\n                                            <Avatar\r\n                                                size=\"xl\"\r\n                                                name={userdata.user_name}\r\n                                                src={userdata.image}\r\n                                            />\r\n                                        </Box>\r\n                                        <Box >\r\n                                        <Heading size='lg'> Hello, {userdata.user_name} </Heading>\r\n                                        </Box>\r\n                                    </SimpleGrid>\r\n    \r\n                            </GridItem >\r\n                            \r\n                            <GridItem >\r\n                                       <Box \r\n                                        bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                                        borderRadius='md'\r\n                                       \r\n                                        color='white'\r\n                                       >\r\n                                           <SimpleGrid columns={5} spacing={5} pt='10px' pb='10px'>\r\n\r\n                                                <Box textAlign='center' >\r\n                                                    \r\n                                                    <Heading as='h4' size='lg' textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}> {userdata.orders.all} </Heading>\r\n                                                    \r\n                                                    <Text  textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>All orders</Text>\r\n                                                </Box> \r\n                                                <Box textAlign='center'>\r\n                                                    <Heading textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} as='h4' size='lg'> {userdata.orders.await_pay} </Heading>\r\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Awaiting Payment</Text>\r\n                                                </Box>\r\n                                                <Box textAlign='center'>\r\n                                                    <Heading as='h4' size='lg' textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}> {userdata.orders.await_ship} </Heading>\r\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Awaiting Shipment</Text>\r\n                                                </Box>\r\n                                                <Box textAlign='center'>\r\n                                                   <Heading as='h4' size='lg' textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}> {userdata.orders.await_del} </Heading>\r\n                                                    \r\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>Awaiting Delivery</Text>\r\n                                                </Box>\r\n                                                <Box textAlign='center'>\r\n                                                    <Heading textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"} as='h4' size='lg'> {userdata.orders.delivered} </Heading>\r\n                                                    <Text textColor={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>  Delivered</Text>\r\n                                                </Box>\r\n                                            </SimpleGrid> \r\n\r\n                                       </Box>\r\n                            </GridItem>\r\n                            \r\n                        </Grid>\r\n\r\n                    </Box>\r\n\r\n                        \r\n\r\n                </GridItem>\r\n            </Grid>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CustomerDashboard\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\AllOrders.js",["190"],"\r\nimport {\r\n    Box,\r\n    Grid,\r\n    GridItem, \r\n    useColorMode,\r\n    Flex,\r\n    Heading,\r\n    Divider,\r\n    HStack,Spacer\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport React, {useState} from \"react\";\r\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\r\nimport OrderTiles from \"..//components/OrderTiles\";\r\n\r\n  \r\n\r\nconst AllOrders = () => {\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    const [orders,setOrders] = useState([\r\n        {\r\n            orderID:1,\r\n            orderStatus:'preparing',\r\n            orderedDate:'21/01',\r\n            orderItemTitle:'Purple Rose Jewelry Water Transfer Tattoo',\r\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\r\n            quantity:5,\r\n            orderAmount:35.47,\r\n            trackingNumber:'23232323232323'\r\n                  \r\n        },\r\n        {\r\n            orderID:2,\r\n            orderStatus:'shipped',\r\n            orderedDate:'13/01',\r\n            \r\n            orderItemTitle:'Marvel batman',\r\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\r\n            quantity:2,\r\n            orderAmount:37.24,\r\n            trackingNumber:'23232323232323'\r\n                  \r\n        },\r\n        {\r\n            orderID:3,\r\n            \r\n            orderStatus:'preparing',\r\n            orderedDate:'15/01',\r\n            \r\n            orderItemTitle:'sonic toy',\r\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\r\n            quantity:3,\r\n            orderAmount:24.56,\r\n            trackingNumber:'23232323232323'\r\n                  \r\n        },\r\n        {\r\n            orderID:4,\r\n            \r\n            orderStatus:'preparing',\r\n            orderedDate:'15/01',\r\n            \r\n            orderItemTitle:'sonic toy',\r\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\r\n            quantity:3,\r\n            orderAmount:24.56,\r\n            trackingNumber:'23232323232323'\r\n                  \r\n        },\r\n        {\r\n            orderID:5,\r\n            \r\n            orderStatus:'preparing',\r\n            orderedDate:'15/01',\r\n            \r\n            orderItemTitle:'sonic toy',\r\n            orderItemImage:'https://images.unsplash.com/photo-1562962230-16e4623d36e6?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80',\r\n            quantity:3,\r\n            orderAmount:24.56,\r\n            trackingNumber:'23232323232323'\r\n                  \r\n        },\r\n    ])\r\n\r\n\r\n    const countOrders = ()=>{\r\n        var prep = 0\r\n        var ship = 0\r\n        var canc = 0\r\n        var await_can = 0\r\n        var received = 0\r\n        for (var i=0;i<orders.length;i++){\r\n            if(orders[i].orderStatus==='preparing'){\r\n                prep+=1\r\n            }\r\n            else if (orders[i].orderStatus==='shipped'){\r\n                ship+=1\r\n            }\r\n            else if (orders[i].orderStatus==='cancelled'){\r\n                canc+=1\r\n            }\r\n            else if (orders[i].orderStatus==='await_cancel'){\r\n                await_can+=1\r\n            }\r\n            else if (orders[i].orderStatus==='received'){\r\n                received+=1\r\n            }\r\n        }\r\n        return {prep,ship,canc,await_can,received}\r\n    }\r\n\r\n    const getacount = countOrders()\r\n\r\n    const cancelOrder = (order_id)=>{\r\n            // console.log(order_id)\r\n            setOrders(orders.map(\r\n              (order)=>order.orderID===order_id?{...order,orderStatus:'await_cancel'}:order\r\n            ))\r\n            \r\n    }\r\n\r\n    const confirmOrder = (order_id)=>{\r\n        setOrders(orders.map(\r\n            (order)=>order.orderID===order_id?{...order,orderStatus:'received'}:order\r\n          ))\r\n    }\r\n\r\n\r\n    return (\r\n        <Box\r\n        \r\n        pt=\"100px\"\r\n        // pl={{ base: \"10px\", sm: \"100px\" }}\r\n        // pr={{ base: \"10px\", sm: \"100px\" }} \r\n        >\r\n            \r\n            <Grid\r\n            \r\n                templateColumns=\"repeat(5, 1fr)\"\r\n                templateRows=\"repeat(1, 1fr)\"\r\n                \r\n            >        \r\n                <GridItem  colSpan={1} rowSpan={2} >\r\n                    <CustomerDashSideBar page=\"customeraddress\" />\r\n                </GridItem>\r\n            \r\n                <GridItem colSpan={4} >\r\n                    <Box \r\n                        width=\"auto\"\r\n                        h=\"auto\"                   \r\n                        overflow=\"hidden\"                    \r\n                        pb=\"5px\"                      \r\n                        >\r\n                        \r\n                      </Box>\r\n\r\n                        <Grid>\r\n\r\n                            <GridItem bg='cyan.900' p='10px'>\r\n                                <Flex> \r\n                                    <Box  p=\"3\">\r\n                                    <Heading as='h3' size='md' color='white'> All Orders </Heading> \r\n                                    </Box>\r\n                            \r\n                                 </Flex>\r\n                            </GridItem>\r\n\r\n                            <GridItem p='5'>\r\n                              <Grid templateColumns=\"repeat(5, 1fr)\">\r\n                                <GridItem colSpan={4}>\r\n\r\n                                    <OrderTiles orders={orders} cancelOrder={cancelOrder} confirmOrder={confirmOrder}/>\r\n\r\n                                </GridItem>\r\n                                <GridItem >\r\n                                    <Box bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} p='10px' mt='20px' color={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}>\r\n                                        <Heading size='sm' textAlign='center'>Summary</Heading>\r\n                                        <Divider mt='2' mb='2'/>\r\n                                        <HStack>\r\n                                            <Box ml='3'>Preparing </Box>\r\n                                            <Spacer />\r\n                                            <Box mr='3'>{getacount.prep}</Box>\r\n                                        </HStack>\r\n                                        <HStack>\r\n                                            <Box ml='3'>Shipped </Box>\r\n                                            <Spacer />\r\n                                            <Box mr='3'>{getacount.ship}</Box>\r\n                                        </HStack>\r\n                                        <HStack>\r\n                                            <Box ml='3'>Await Cancel </Box>\r\n                                            <Spacer />\r\n                                            <Box mr='3'>{getacount.await_can}</Box>\r\n                                        </HStack>\r\n                                        <HStack>\r\n                                            <Box ml='3'>Cancelled </Box>\r\n                                            <Spacer />\r\n                                            <Box mr='3'>{getacount.canc}</Box>\r\n                                        </HStack>\r\n                                        <HStack>\r\n                                            <Box ml='3'>Received </Box>\r\n                                            <Spacer />\r\n                                            <Box mr='3'>{getacount.received}</Box>\r\n                                        </HStack>\r\n                                    </Box>\r\n\r\n                                </GridItem>\r\n                              </Grid>\r\n                            </GridItem>\r\n                       \r\n                             \r\n                        </Grid>\r\n                        \r\n\r\n                </GridItem>\r\n            </Grid>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default AllOrders\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\CustomerAdress.js",["191","192"],"import {\r\n    Box,\r\n    Grid,\r\n    GridItem, \r\n    Heading,  \r\n    Flex,\r\n    Spacer ,\r\n    Button,\r\n    useDisclosure,\r\n    Modal,\r\n    ModalBody,\r\n    ModalContent,\r\n    ModalOverlay,\r\n    ModalCloseButton,\r\n    ModalHeader,\r\n    useToast,\r\n    useColorMode\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\r\nimport ShipAddressses from \"../components/ShipAddressses\";\r\nimport AddAddress from \"../components/AddAddress\"\r\n\r\nconst CustomerAddress = () => {\r\n\r\n    const [address,setAddress] = useState([\r\n        {\r\n            id:1,\r\n            name:'pasan madushan',\r\n            tp:'07704543436',\r\n            street:'1234',\r\n            city:'abc',\r\n            state:'def',\r\n            zip:'12121'   \r\n                       \r\n        },\r\n        {\r\n            id:2,\r\n            name:'vimukthi madushan',\r\n            tp:'077238404543436',\r\n            street:'sdfsdf',\r\n            city:'sdflndsfldsnfk',\r\n            state:'slfnsdflnsdf',\r\n            zip:'1203948234121'      \r\n                   \r\n        },\r\n        {\r\n            id:3,\r\n            name:'chalindu malshika',\r\n            tp:'077043543436',\r\n            street:'0324284',\r\n            city:'rathnapura',\r\n            state:'hdlfdfs',\r\n            zip:'139202121'     \r\n            \r\n             \r\n        },\r\n        {\r\n            id:4,\r\n            name:'chandima',\r\n            tp:'042342492',\r\n            street:'1234',\r\n            city:'jsdofjsdof',\r\n            state:'sdofjdsf',\r\n            zip:'12121'    \r\n                      \r\n        },\r\n    ])\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const toast = useToast()\r\n\r\n    //delete an addresss\r\n    const deleteAddress  = (id)=>{\r\n        setAddress(address.filter(\r\n            (address)=>address.id!==id\r\n        ))\r\n        toast({\r\n            position: \"bottom-right\",    \r\n            description: \"Shipping address deleted successfully\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n          })\r\n    }\r\n\r\n    //add new address\r\n    const addAddress = (Address)=>{\r\n        const id = Math.floor(Math.random()*100)+1\r\n        const newAddress = {id,...Address}\r\n        setAddress([...address,newAddress]);\r\n\r\n    }\r\n\r\n    //update address\r\n    const updateAddress  = async(data)=>{\r\n        console.log('update address data ----------------')\r\n        console.log(data);\r\n        // setTasks(tasks.map(\r\n        //     (task)=>task.id===id?{...task,reminder:data.reminder}:task\r\n        //   ))\r\n        // await setAddress(address.map(\r\n        //     (address1)=>address1.id==data.id?{...address1,name:data.name}:address1\r\n        // ))\r\n        // // console.log(address[0])\r\n        \r\n   \r\n        setAddress(address.map(\r\n            (address1)=>(address1.id==data.id)?{...address1,data}:address1\r\n        ))\r\n        \r\n\r\n\r\n    }\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    \r\n\r\n    return (\r\n        <Box\r\n        \r\n        pt=\"100px\"\r\n        // pl={{ base: \"10px\", sm: \"100px\" }}\r\n        // pr={{ base: \"10px\", sm: \"100px\" }} \r\n        >\r\n            \r\n            <Grid\r\n            \r\n                templateColumns=\"repeat(5, 1fr)\"\r\n                templateRows=\"repeat(1, 1fr)\"\r\n                \r\n            >        \r\n                <GridItem  colSpan={1} rowSpan={2} >\r\n                    <CustomerDashSideBar page=\"customeraddress\" />\r\n                </GridItem>\r\n            \r\n                <GridItem colSpan={4} >\r\n                    <Box \r\n                        width=\"auto\"\r\n                        h=\"auto\"                   \r\n                        overflow=\"hidden\"                    \r\n                        pb=\"5px\"                      \r\n                        >\r\n                        \r\n                      </Box>\r\n\r\n                        <Grid templateColumns=\"repeat(3, 1fr)\" >\r\n\r\n                            <GridItem colSpan={3} bg='cyan.900' p='10px'>\r\n                                <Flex> \r\n                                    <Box  p=\"3\">\r\n                                    <Heading as='h3' size='md' color='white'> My Shipping Address </Heading> \r\n                                    </Box>\r\n                                    <Spacer />\r\n                                    <Box p=\"1\">\r\n                                        <Button onClick={onOpen} colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} border='2px' borderColor='cyan.50' size=\"md\">\r\n                                            Add Shipping Address\r\n                                        </Button>\r\n                    \r\n                                            <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n                                            <ModalOverlay />\r\n                                                <ModalContent>\r\n                                                    <ModalHeader>Add New Shipping Address</ModalHeader>\r\n                                                    <ModalCloseButton />\r\n                                                    <ModalBody pb='5'>\r\n                                                    <AddAddress addAddress={addAddress} trigger={onClose}/>\r\n                                                     </ModalBody>\r\n                                                    \r\n                                                </ModalContent>\r\n                                            </Modal>\r\n\r\n                                    </Box>\r\n                                 \r\n                                 </Flex>\r\n                            </GridItem>\r\n\r\n                       \r\n                                <ShipAddressses addresses={address} deleteAddress={deleteAddress}  updateAddress={updateAddress}  />\r\n  \r\n                        </Grid>\r\n                        \r\n\r\n                </GridItem>\r\n            </Grid>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CustomerAddress\r\n","F:\\DB_Project\\Front-end-react\\src\\pages\\ChangePersonalDet.js",["193","194"],"import {\r\n    Box,\r\n    Grid,\r\n    GridItem,\r\n    useColorMode,\r\n    Flex,\r\n    Heading,\r\n    useDisclosure,\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\r\nimport ChangePasswordForm from \"../components/ChangePasswordForm\";\r\nimport ChangePersonalDetails from \"../components/ChangePersonalDetForm\";\r\n\r\n\r\n\r\nconst ChangePersonalDet = () => { \r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    const [personaldet,setPersonaldet] = useState(\r\n        {\r\n            id:1,\r\n            firstName:'pasan',\r\n            lastName:'madushan',\r\n            tp:'07704543436',                               \r\n        },)\r\n\r\n    //implement change password\r\n\r\n    const updateDetails = (data)=>{\r\n        setPersonaldet(data)\r\n        console.log(personaldet)\r\n    }\r\n\r\n\r\n        return (\r\n            <Box\r\n            \r\n            pt=\"100px\"\r\n            // pl={{ base: \"10px\", sm: \"100px\" }}\r\n            // pr={{ base: \"10px\", sm: \"100px\" }} \r\n            >\r\n                \r\n                <Grid\r\n            \r\n            templateColumns=\"repeat(5, 1fr)\"\r\n            templateRows=\"repeat(1, 1fr)\"\r\n            \r\n        >        \r\n            <GridItem  colSpan={1} rowSpan={2} >\r\n                <CustomerDashSideBar page=\"customeraddress\" />\r\n            </GridItem>\r\n        \r\n            <GridItem colSpan={4} >\r\n                <Box \r\n                    width=\"auto\"\r\n                    h=\"auto\"                   \r\n                    overflow=\"hidden\"                    \r\n                    pb=\"5px\"                      \r\n                    >\r\n                    \r\n                  </Box>\r\n\r\n                    <Grid templateColumns=\"repeat(3)\">\r\n\r\n                        <GridItem bg='cyan.900' p='10px' colSpan={3}>\r\n                            <Flex> \r\n                                <Box  p=\"3\">\r\n                                <Heading as='h3' size='md' color='white'> Change Account Details </Heading> \r\n                                </Box>\r\n                                                   \r\n                             </Flex>\r\n                        </GridItem>\r\n\r\n                        <GridItem colSpan={2}>\r\n                              <Box bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}  p='10' m='5' border='2px' borderColor='teal.600' borderRadius='15px'>         \r\n                            <ChangePersonalDetails data={personaldet} updateDetails={updateDetails}/>   \r\n                            </Box>\r\n                       </GridItem>\r\n\r\n                       <GridItem >\r\n                       <Box bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}  p='10' m='5' border='2px' borderColor='teal.600' borderRadius='15px'> \r\n                       <ChangePasswordForm />\r\n                       \r\n                       </Box>\r\n                       </GridItem>\r\n\r\n                    </Grid>\r\n            </GridItem>\r\n\r\n         \r\n        </Grid>\r\n\r\n    \r\n            </Box>\r\n        )\r\n\r\n\r\n}\r\n\r\nexport default ChangePersonalDet","F:\\DB_Project\\Front-end-react\\src\\pages\\CardDetails.js",["195"],"import {\r\n    Box,\r\n    Grid,\r\n    GridItem, \r\n    Heading,  \r\n    Flex,\r\n    Spacer ,\r\n    Button,\r\n    useDisclosure,\r\n    Modal,\r\n    ModalBody,\r\n    ModalContent,\r\n    ModalOverlay,\r\n    ModalCloseButton,\r\n    ModalHeader,\r\n    useToast,\r\n    useColorMode\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport AddBankCard from \"../components/AddBankCard\";\r\nimport BankCards from \"../components/BankCards\";\r\nimport CustomerDashSideBar from \"../components/CustomerDashSideBar\";\r\n\r\nconst CardDetails = () => {\r\n\r\n    const [bankCards,setBankCards] = useState([\r\n        {\r\n            cardNumber:323446453434,\r\n            owner:'pasan madushan',\r\n            cvv:'123',\r\n            expDate:'10/12',\r\n                  \r\n        },\r\n        {\r\n            cardNumber:323446453435,\r\n            owner:'vimukthi madushan',\r\n            cvv:'123',\r\n            expDate:'10/12',\r\n                  \r\n        },\r\n        {\r\n            cardNumber:323446453436,\r\n            owner:'chalindu malshika',\r\n            cvv:'123',\r\n            expDate:'10/12',\r\n                  \r\n        },\r\n        {\r\n            cardNumber:323446453437,\r\n            owner:'chandima prabath',\r\n            cvv:'123',\r\n            expDate:'10/12',\r\n                  \r\n        },\r\n    ])\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const toast = useToast()\r\n\r\n    //delete a card\r\n    const deleteBankCard  = (cardNumber)=>{\r\n        setBankCards(bankCards.filter(\r\n            (bankCard)=>bankCard.cardNumber!==cardNumber\r\n        ))\r\n        toast({\r\n            position: \"bottom-right\",    \r\n            description: \"Bank Card deleted successfully\",\r\n            status: \"error\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n          })\r\n    }\r\n\r\n    //add new card\r\n    const addBankCard = (CardDetails)=>{\r\n        setBankCards([...bankCards,CardDetails]);\r\n\r\n    }\r\n\r\n   \r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    \r\n\r\n    return (\r\n        <Box   pt=\"100px\">\r\n            \r\n            <Grid\r\n            \r\n                templateColumns=\"repeat(5, 1fr)\"\r\n                templateRows=\"repeat(1, 1fr)\"\r\n                \r\n            >        \r\n                <GridItem  colSpan={1} rowSpan={2} >\r\n                    <CustomerDashSideBar page=\"customeraddress\" />\r\n                </GridItem>\r\n            \r\n                <GridItem colSpan={4} >\r\n                    <Box \r\n                        width=\"auto\"\r\n                        h=\"auto\"                   \r\n                        overflow=\"hidden\"                    \r\n                        pb=\"5px\"                      \r\n                        >\r\n                        \r\n                      </Box>\r\n\r\n                        <Grid templateColumns=\"repeat(3, 1fr)\" >\r\n\r\n                            <GridItem colSpan={3} bg='cyan.900' p='10px'>\r\n                                <Flex> \r\n                                    <Box  p=\"3\">\r\n                                    <Heading as='h3' size='md' color='white'> Card & Bank Details </Heading> \r\n                                    </Box>\r\n                                    <Spacer />\r\n                                    <Box p=\"1\">\r\n                                        <Button onClick={onOpen} colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} border='2px' borderColor='cyan.50' size=\"md\">\r\n                                            Add New Payment Method\r\n                                        </Button>\r\n                    \r\n                                            <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n                                            <ModalOverlay />\r\n                                                <ModalContent>\r\n                                                    <ModalHeader>Add New Payment Method</ModalHeader>\r\n                                                    <ModalCloseButton />\r\n                                                    <ModalBody pb='5'>\r\n                                                    <AddBankCard addBankCard={addBankCard} trigger={onClose}/>\r\n                                                     </ModalBody>\r\n                                                    \r\n                                                </ModalContent>\r\n                                            </Modal>\r\n\r\n                                    </Box>\r\n                                 \r\n                                 </Flex>\r\n                            </GridItem>\r\n\r\n                                <BankCards bankcards={bankCards} deleteBankCard={deleteBankCard} />\r\n                                \r\n                        </Grid>\r\n                        \r\n\r\n                </GridItem>\r\n            </Grid>\r\n\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CardDetails\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\ReviewCountPreview.js",["196","197","198","199","200","201","202","203"],"import { StarIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  HStack,\r\n  Text,\r\n  Avatar,\r\n  Box,\r\n  useColorMode,\r\n  Heading,\r\n  VStack,\r\n  Progress,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport Replys from \"./Replys\";\r\n\r\nfunction ReviewCountPreview(props) {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  var reviews = [];\r\n\r\n  const total_reviews = props.feedbacks.length;\r\n\r\n  var s5 = 0;\r\n  var s4 = 0;\r\n  var s3 = 0;\r\n  var s2 = 0;\r\n  var s1 = 0;\r\n\r\n  for (var i = 0; i < props.feedbacks.length; i++) {\r\n    if (props.feedbacks[i].rating === 5) {\r\n      s5 = s5 + 1;\r\n    } else if (props.feedbacks[i].rating === 4) {\r\n      s4 = s4 + 1;\r\n    } else if (props.feedbacks[i].rating === 3) {\r\n      s3 = s3 + 1;\r\n    } else if (props.feedbacks[i].rating === 2) {\r\n      s2 = s2 + 1;\r\n    } else if (props.feedbacks[i].rating === 1) {\r\n      s1 = s1 + 1;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Stack w=\"50vh\" h=\"50vh\" spacing=\"1px\" ml='20px'>\r\n      <Box w=\"300px\" pb='5px'>\r\n        <Text fontSize='lg'>\r\n          5 <StarIcon color=\"cyan.500\" />\r\n        </Text>\r\n        <Text fontSize='xs'>\r\n            {s5} reviews\r\n        </Text>\r\n        <Progress value={(s5 / total_reviews) * 100} />\r\n      </Box>\r\n\r\n      <Box w=\"300px\" pb='5px'>\r\n        <Text fontSize='lg'>\r\n          4 <StarIcon color=\"cyan.500\" />\r\n        </Text>\r\n        <Text fontSize='xs'>\r\n            {s4} reviews\r\n        </Text>\r\n        <Progress value={(s4 / total_reviews) * 100} />\r\n      </Box>\r\n\r\n      <Box w=\"300px\" pb='5px'>\r\n        <Text fontSize='lg'>\r\n          3 <StarIcon color=\"cyan.500\" />\r\n        </Text>\r\n        <Text fontSize='xs'>\r\n            {s3} reviews\r\n        </Text>\r\n        <Progress value={(s3 / total_reviews) * 100} />\r\n      </Box>\r\n      <Box w=\"300px\" pb='5px'>\r\n        <Text fontSize='lg'>\r\n          2 <StarIcon color=\"cyan.500\" />\r\n        </Text>\r\n        <Text fontSize='xs'>\r\n            {s2} reviews\r\n        </Text>\r\n        <Progress value={(s2 / total_reviews) * 100} />\r\n      </Box>\r\n      <Box w=\"300px\" pb='5px'>\r\n        <Text fontSize='lg'>\r\n          1 <StarIcon color=\"cyan.500\" />\r\n        </Text>\r\n        <Text fontSize='xs'>\r\n            {s1} reviews\r\n        </Text>\r\n        <Progress value={(s1 / total_reviews) * 100} />\r\n      </Box>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default ReviewCountPreview;\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\CategorizedReviewPreview.js",["204"],"import { StarIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  HStack,\r\n  Text,\r\n  Avatar,\r\n  Box,\r\n  useColorMode,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport Replys from \"./Replys\";\r\n\r\nfunction CategorizedReviewPreview(props) {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  var reviews = [];\r\n\r\n  var stars = (rating) => {\r\n    return Array(5)\r\n      .fill(\"\")\r\n      .map((_, j) => (\r\n        <StarIcon key={j} color={j < rating ? \"cyan.500\" : \"cyan.300\"} />\r\n      ));\r\n  };\r\n\r\n  for (var i = 0; i < props.feedbacks.length; i++) {\r\n    if (props.feedbacks[i].rating === props.rating || props.rating === 'all') {\r\n      reviews.push(\r\n        <Box mb='10px'>\r\n          <HStack>\r\n            <Avatar\r\n              name={props.feedbacks[i].customer_name}\r\n              src={props.feedbacks[i].customer_dp}\r\n            />\r\n            <Box\r\n              w=\"100%\"\r\n              borderWidth=\"2px\"\r\n              borderRadius=\"lg\"\r\n              p=\"10px\"\r\n              bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.500\"}\r\n            >\r\n              <Heading as=\"h5\" size=\"sm\">\r\n                {props.feedbacks[i].customer_name}\r\n              </Heading>\r\n              <Text>{props.feedbacks[i].comment}</Text>\r\n              <Box d=\"flex\" mt=\"2\" ml=\"2px\" alignItems=\"center\">\r\n                {stars(props.feedbacks[i].rating)}\r\n                <Box as=\"span\" ml=\"2\" fontSize=\"sm\">\r\n                  {props.feedbacks[i].rating}/5\r\n                </Box>\r\n              </Box>\r\n            </Box>\r\n          </HStack>\r\n          <Replys replys={props.feedbacks[i].reply} />\r\n        </Box>\r\n      );\r\n    }\r\n  }\r\n\r\n  if (reviews.length === 0) {\r\n    reviews.push(<Text>No reviews</Text>);\r\n  }\r\n\r\n  return <>{reviews}</>;\r\n}\r\n\r\nexport default CategorizedReviewPreview;\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\SearchBar.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\ProductCard.js",["205","206","207","208","209","210","211","212"],"import { StarIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  Text,\r\n  useColorMode,\r\n  Avatar,\r\n  AvatarBadge,\r\n  HStack,\r\n  VStack,\r\n  Heading,\r\n  Image,\r\n  Badge,\r\n  Img,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction ProductCard(props) {\r\n  return (\r\n    <Box maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n      <Img src={props.imageUrl} alt={props.imageAlt} w='230px' h='250px' />\r\n\r\n      <Box p=\"6\">\r\n      <Badge\r\n            borderRadius=\"full\"\r\n            px=\"2\"\r\n            colorScheme='yellow'\r\n            variant=\"outline\" \r\n            fontSize='9px'\r\n          >\r\n            {props.category}\r\n          </Badge>\r\n        <Box fontWeight=\"semibold\" as=\"h4\" lineHeight=\"tight\" fontSize='xl' isTruncated>\r\n          {props.title}\r\n        </Box>\r\n       \r\n        <Box>\r\n          <Text color=\"gray.600\" fontSize=\"3xl\">\r\n            Rs. {props.price}\r\n          </Text>\r\n        </Box>\r\n\r\n        <Box d=\"flex\" alignItems=\"baseline\" mt=\"1\">\r\n          <Badge\r\n            borderRadius=\"full\"\r\n            px=\"2\"\r\n            colorScheme={props.status === \"Available\" ? \"green\" : \"red\"}\r\n          >\r\n            {props.status}\r\n          </Badge>\r\n          <Box\r\n            color=\"gray.500\"\r\n            fontWeight=\"semibold\"\r\n            letterSpacing=\"wide\"\r\n            fontSize=\"xs\"\r\n            textTransform=\"uppercase\"\r\n            ml=\"2\"\r\n          >\r\n            {props.orders} Orders\r\n          </Box>\r\n        </Box>\r\n\r\n       \r\n        <Box d=\"flex\" mt=\"2\" alignItems=\"center\">\r\n          {Array(5)\r\n            .fill(\"\")\r\n            .map((_, i) => (\r\n              <StarIcon\r\n                key={i}\r\n                color={i < props.rating ? \"cyan.800\" : \"gray.300\"}\r\n              />\r\n            ))}\r\n          <Box as=\"span\" ml=\"2\" color=\"gray.600\" fontSize=\"sm\">\r\n            {props.reviews} reviews\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ProductCard;\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\CustomerDashSideBar.js",["213","214","215","216","217","218"],"import {\r\n    Box,\r\n    Grid,\r\n    GridItem, \r\n    Heading,\r\n    Text,\r\n    Divider,\r\n    Link,\r\n    Button,\r\n    useColorMode\r\n  } from \"@chakra-ui/react\";\r\n\r\n\r\n\r\nconst CustomerDashSideBar = ({page}) => {\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    const sidebarButton = {\r\n        width:'80%',   \r\n        marginTop:'7px',\r\n        marginBottom:'7px',\r\n        marginLeft:'10%',\r\n        marginRight:'10%'\r\n    }\r\n\r\n    return (\r\n        <Box\r\n            width=\"auto\"\r\n            height={window.innerHeight-100}\r\n            // height=\"100%\"\r\n            overflow=\"hidden\"\r\n            bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\r\n            pt='5'  \r\n           \r\n                    \r\n        >                   \r\n                <Link href='/customerdashboard'> <Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}>Dashboard </Button> </Link>     \r\n          \r\n                <Link href='/allorders'> <Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}> My Orders  </Button> </Link>     \r\n         \r\n                <Link href='/carddetails'> <Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}> Card & Bank Details  </Button></Link>     \r\n            \r\n                <Link href='/shippingaddress'><Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}> Shipping Address </Button></Link>     \r\n         \r\n                <Link href='/changepersonaldet'><Button colorScheme=\"teal\" bg={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"} size=\"md\" style={sidebarButton}>Change Account Details </Button></Link>     \r\n           \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default CustomerDashSideBar\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\AddAddress.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\OrderTiles.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\ShipAddressses.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\ChangePersonalDetForm.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\AddBankCard.js",["219"],"import { useState } from 'react';\r\nimport{\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    useToast\r\n\r\n} from \"@chakra-ui/react\";\r\n\r\nconst AddBankCard = ({addBankCard,trigger}) => {\r\n    const [cardNumber,setCardNumber] = useState('')\r\n    const [owner,setOwner] = useState('')\r\n    const [cvv,setCvv] = useState('')\r\n    const [expDate,setExpDate] = useState('')\r\n    \r\n\r\n    const toast = useToast()\r\n\r\n\r\n    const onSubmit = (e)=>{\r\n        e.preventDefault()\r\n\r\n        if(!cardNumber || !owner || !cvv || !expDate){\r\n            alert('Empty Field')\r\n            return\r\n        }\r\n\r\n        if(cardNumber.toString().length!==12){\r\n            alert('Invalid Card Number')\r\n            return\r\n        }\r\n    \r\n        var givenDate = new Date(expDate);\r\n        var today = new Date();\r\n        if (givenDate.getFullYear() < today.getFullYear()) {\r\n            alert('card is expired')\r\n            return\r\n        }\r\n        else if (givenDate.getFullYear() == today.getFullYear()){\r\n            if(givenDate.getMonth() < today.getMonth()){\r\n                alert('card is expired')\r\n                return\r\n            }\r\n        }\r\n    \r\n        \r\n        addBankCard({cardNumber,owner,cvv,expDate})\r\n\r\n        setCardNumber('')\r\n        setOwner('')\r\n        setCvv('')\r\n        setExpDate('')\r\n        \r\n        toast({\r\n            position: \"bottom-right\",    \r\n            description: \"New payment method added successfully\",\r\n            status: \"success\",\r\n            duration: 5000,\r\n            isClosable: true,\r\n          })\r\n    }\r\n\r\n    return (\r\n        <form  onSubmit={onSubmit} >\r\n            <FormControl>\r\n                <FormLabel>Card Number</FormLabel>\r\n                <Input type=\"number\" placeholder='Card Number' value={cardNumber} onChange={(e)=>setCardNumber(e.target.value)} />\r\n            </FormControl>\r\n            <FormControl>\r\n                <FormLabel>Owner</FormLabel>\r\n                <Input type=\"text\" placeholder='Owner' value={owner} onChange={(e)=>setOwner(e.target.value)}  />\r\n            </FormControl>\r\n            <FormControl>\r\n                <FormLabel>CVV</FormLabel>\r\n                <Input type=\"number\" placeholder='CVV' value={cvv} onChange={(e)=>setCvv(e.target.value)} />\r\n            </FormControl>\r\n            <FormControl>\r\n                <FormLabel>Exp Date</FormLabel>\r\n                <Input type=\"month\" placeholder='Exp Date' value={expDate} onChange={(e)=>setExpDate(e.target.value)} />\r\n            </FormControl>\r\n            <Input mt='5' mb='5'  type=\"submit\" value='Save Card Details' className='btn btn-block' bg=\"teal.400\" color='white' onClick={trigger} />\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddBankCard\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\ChangePasswordForm.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\BankCards.js",[],"F:\\DB_Project\\Front-end-react\\src\\components\\Replys.js",["220"],"import {\r\n  Box,\r\n  Text,\r\n  useColorMode,\r\n  Avatar,\r\n  HStack,\r\n  VStack,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nfunction Replys(props) {\r\n  const { colorMode, toggleColorMode } = useColorMode();\r\n  const dp = \"\";\r\n\r\n  var replys = [];\r\n  for (var i = 0; i < props.replys.length; i++) {\r\n    replys.push(\r\n      <HStack spacing=\"10px\" w=\"100%\">\r\n        <Avatar name=\"Electrica\" src={dp} size=\"sm\" />\r\n        <Box\r\n          w=\"100%\"\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          p=\"10px\"\r\n          mt=\"20px\"\r\n          bg={colorMode === \"light\" ? \"gray.50\" : \"gray.500\"}\r\n        >\r\n        <Heading  as=\"h5\" size=\"sm\">Electrica</Heading>\r\n          <Text>{props.replys[i]}</Text>\r\n        </Box>\r\n      </HStack>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box ml=\"100px\" mt='10px'>\r\n      <VStack w=\"100%\">{replys}</VStack>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Replys;\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\OrderTile.js",["221","222","223"],"\r\nimport {\r\n    Box,\r\n    Grid,\r\n    GridItem,\r\n    useColorMode,\r\n    SimpleGrid,\r\n    Heading,\r\n    Text,\r\n    Image,\r\n    HStack,\r\n    Badge,\r\n    Button,\r\n    VStack,\r\n    Link,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    PopoverHeader,\r\n    PopoverArrow,\r\n    PopoverBody,\r\n    PopoverCloseButton,\r\n    PopoverFooter,\r\n    ButtonGroup\r\n  } from \"@chakra-ui/react\";\r\n\r\nconst OrderTile = ({order,cancelOrder,confirmOrder}) => {\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n// try with normal functions\r\n    const StatusBadge = ({status})=>{\r\n        if(status==='shipped'){\r\n            return (<Badge colorScheme=\"green\">Shipped</Badge>)\r\n        }\r\n        else if (status==='preparing'){\r\n            return (<Badge colorScheme=\"yellow\">Preparing</Badge>)\r\n        }\r\n        else if (status==='cancelled'){\r\n            return (<Badge colorScheme=\"red\">Cancelled</Badge>)\r\n        }\r\n        else if (status==='received'){\r\n            return (<Badge colorScheme=\"gray.100\">received</Badge>)\r\n        }\r\n        else if (status==='await_cancel'){\r\n            return  (<Badge colorScheme=\"yellow\">Await Cancel</Badge>)\r\n        }\r\n        else{\r\n            return <div></div>\r\n        }\r\n    }    \r\n\r\n    const OrderActions = ({status})=>{\r\n        if(status=='shipped'){\r\n            return (<VStack>\r\n                <Link href={\"https://parcelsapp.com/en/tracking/\"+order.trackingNumber} isExternal><Button colorScheme='teal' size='xs'>Track Order</Button></Link>\r\n                <Button colorScheme='teal' size='xs' onClick={()=>{confirmOrder(order.orderID)}}>Confirm Received</Button>\r\n            </VStack>)\r\n        }\r\n        else if (status=='preparing'){\r\n            return (\r\n            <Box>\r\n                \r\n                <Popover>\r\n                        <PopoverTrigger>\r\n                        <Button colorScheme='teal' size='xs'  >Cancel Order</Button>\r\n                        </PopoverTrigger>\r\n                        <PopoverContent>\r\n                            <PopoverHeader textAlign='left' fontWeight=\"semibold\">Cancel the order</PopoverHeader>\r\n                            <PopoverArrow />\r\n                            <PopoverCloseButton />\r\n                            <PopoverBody textAlign='center'>\r\n                            Are you really want to cancel the order\r\n                            </PopoverBody>\r\n                            <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\r\n                                <ButtonGroup size=\"sm\">\r\n                                    <Button colorScheme=\"red\" onClick={()=>{cancelOrder(order.orderID)}}>Cancel Order</Button>\r\n                                </ButtonGroup>\r\n                            </PopoverFooter>\r\n                            </PopoverContent>\r\n                            </Popover>                  \r\n                </Box>\r\n            )\r\n        }\r\n        else{\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}  m='5' color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}>\r\n            <Grid>\r\n                <GridItem p='2' bg={colorMode === \"light\" ? \"teal.500\" : \"teal.50\"} color={colorMode === \"light\" ? \"teal.50\" : \"teal.500\"} >\r\n                    <SimpleGrid columns={3} textAlign='center'>\r\n                        <Box>\r\n                            <Heading as='h6' size='xs'>Order ID</Heading>\r\n                            <Text>{order.orderID}</Text>\r\n                        </Box>\r\n                        <Box>\r\n                            <Heading as='h6' size='xs'>Order Date</Heading>\r\n                            <Text>{order.orderedDate}</Text>\r\n                        </Box>\r\n                        <Box>\r\n                            <Heading as='h6' size='xs'>Order Amount</Heading>\r\n                            <Text>{order.orderAmount}</Text>\r\n                        </Box>\r\n                    </SimpleGrid>\r\n\r\n                </GridItem>\r\n                <GridItem p='2'  color={colorMode === \"light\" ? \"teal.800\" : \"teal.50\"} >\r\n\r\n                    <SimpleGrid columns={3} p='2'>\r\n                        <HStack>\r\n                            <Image\r\n                                boxSize=\"80px\"\r\n                                objectFit=\"cover\"\r\n                                src={order.orderItemImage}\r\n                                alt={order.orderItemImage}\r\n                            />\r\n                            <Heading as='h6' size='xs'>{order.orderItemTitle}</Heading>\r\n                        </HStack>\r\n                        <Box textAlign='center'>\r\n                           <StatusBadge  status={order.orderStatus}/>\r\n                        </Box>\r\n                        <Box textAlign='center'>\r\n                            {/* {order.status==='shipped'?(\r\n                       <Box>    {console.log(\"shipped\")}\r\n             <Button colorScheme='teal' size='xs'>Track Order</Button>\r\n                <Button colorScheme='teal' size='xs'>Confirm Received</Button>\r\n                                </Box>\r\n            ):(<Box><Button colorScheme='teal' size='xs'  onClick={()=>{cancelOrder(order.orderID)}}>Cancel Order</Button></Box>)} */}\r\n                             <OrderActions status={order.orderStatus}/> \r\n                           \r\n                        </Box>\r\n                    </SimpleGrid>\r\n\r\n                </GridItem>\r\n             \r\n\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default OrderTile\r\n","F:\\DB_Project\\Front-end-react\\src\\components\\ShipAddress.js",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241"],"import {React, useState} from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    GridItem,\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    useColorMode,\r\n    useDisclosure,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    PopoverFooter,\r\n    PopoverArrow,\r\n    PopoverCloseButton,\r\n    ButtonGroup,\r\n    FormControl,\r\n    FormLabel,\r\n    Input\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport { ImUser,ImPhone, ImLocation } from \"react-icons/im\";\r\n\r\n\r\nconst ShipAddress = ({address,deleteAddress,updateAddress}) => {\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    const [data, setData] = useState({\r\n        id: address.id,\r\n        name: address.name,\r\n        tp: address.tp,\r\n        street: address.street,\r\n        city: address.city,\r\n        state: address.state,\r\n        zip: address.zip,\r\n    })\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        // console.log('---------handlesubmit data--------')\r\n        // console.log(data)\r\n        updateAddress(data)\r\n        \r\n        // updateAddress(address.id)\r\n    }\r\n\r\n    const handleChange =  (event) => {\r\n        var value = event.target.value;\r\n        var name = event.target.name;\r\n\r\n        setData({ ...data, [event.target.name]: value })\r\n        // console.log(data)\r\n    };\r\n\r\n\r\n    return(\r\n        <GridItem>\r\n        <Box  \r\n            bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\r\n            borderRadius='md'\r\n            border='1px'\r\n            borderColor='cyan.600'\r\n            p='6'\r\n            m='4'\r\n            pb='3'\r\n           \r\n            >\r\n\r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n                    <ImUser />\r\n                    <Box\r\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"lg\"       \r\n                        ml=\"2\"\r\n                    >\r\n                        { address.name }\r\n                    </Box>\r\n                </Box> \r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n                \r\n                    <ImPhone color='cyan.600'/>\r\n                    <Box\r\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"md\"       \r\n                        ml=\"2\"\r\n                    >\r\n                        { address.tp }\r\n                    </Box>\r\n                </Box> \r\n\r\n                <Box d=\"flex\" alignItems=\"baseline\" mt='2' mb='5'>\r\n                \r\n                    <ImLocation m='3'/>\r\n                    <Box\r\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"md\"       \r\n                        ml=\"2\"\r\n                    >\r\n                        <Box>{ address.street }</Box>\r\n                        <Box>{ address.city }</Box>\r\n                        <Box>{ address.state }</Box>\r\n                        <Box>{ address.zip }</Box>\r\n                    </Box>\r\n                </Box> \r\n               \r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n\r\n                    {/* Delete Address */}\r\n                \r\n                    <Popover>\r\n                        <PopoverTrigger>\r\n                        <Button colorScheme=\"red\" size=\"xs\"  > Delete</Button> \r\n                        </PopoverTrigger>\r\n                        <PopoverContent>\r\n                            <PopoverHeader fontWeight=\"semibold\">Delete Shipping Address</PopoverHeader>\r\n                            <PopoverArrow />\r\n                            <PopoverCloseButton />\r\n                            <PopoverBody>\r\n                            Are you sure you want to delete the shipping address?\r\n                            </PopoverBody>\r\n                            <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\r\n                                <ButtonGroup size=\"sm\">\r\n                                    <Button colorScheme=\"red\" onClick={()=>{deleteAddress(address.id)}}>Delete</Button>\r\n                                </ButtonGroup>\r\n                            </PopoverFooter>\r\n                            </PopoverContent>\r\n                            </Popover>                   \r\n                </Box>\r\n\r\n        </Box>\r\n        </GridItem>\r\n    )\r\n}\r\n\r\nexport default ShipAddress\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    {/* {/* Edit Address \r\n\r\n                     <Button colorScheme=\"teal\" size=\"xs\" mr='2' onClick={onOpen} >\r\n                        Edit\r\n                    </Button> \r\n                    {/* Edit modal */}\r\n                    // <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n                    //     <ModalOverlay />\r\n                    //     <ModalContent>\r\n                    //         <ModalHeader>Edit shipping address</ModalHeader>\r\n                    //             <ModalCloseButton />\r\n                           \r\n                        // <form onSubmit={handleSubmit}>\r\n                        //     <ModalBody>\r\n                            \r\n                        //     <FormControl id=\"name\" > */}\r\n                        //         <FormLabel>Name</FormLabel>\r\n                                \r\n                        //         <Input   \r\n                        //         placeholder='Name'       \r\n                        //         value={data.name}\r\n                        //         name='name'\r\n                        //         onChange={(event) => handleChange(event)}\r\n                        //         />\r\n                        //     </FormControl>\r\n\r\n                        //     <FormControl id=\"tp\" >\r\n                        //         <FormLabel>Telephone</FormLabel>\r\n                        //         <Input \r\n                        //         placeholder=\"Telephone\" \r\n                            //     value={data.tp}\r\n                            //     name='tp'\r\n                            //     onChange={(event) => handleChange(event)}  />\r\n                            // </FormControl>\r\n\r\n                            // <FormControl id=\"street\" >\r\n                            //     <FormLabel>Street</FormLabel>\r\n                            //     <Input \r\n                            //     placeholder=\"street\" \r\n                            //     value={data.street}\r\n                            //     name='street'\r\n                            //     onChange={(event) => handleChange(event)} />\r\n                            // </FormControl>\r\n                            // <FormControl id=\"city\" >\r\n                            //     <FormLabel>City</FormLabel>\r\n                            //     <Input placeholder=\"city\" \r\n                            //     value={data.city}\r\n                            //     name='city'\r\n                            //     onChange={(event) => handleChange(event)} />\r\n                            // </FormControl>\r\n                            // <FormControl id=\"state\" >\r\n                            //     <FormLabel>State</FormLabel>\r\n                    //             <Input placeholder=\"state\" \r\n                    //             value={data.state}\r\n                    //             name='state'\r\n                    //             onChange={(event) => handleChange(event)}\r\n                    //             />\r\n                    //         </FormControl>\r\n                    //         <FormControl id=\"zip\" >\r\n                    //             <FormLabel>Zip</FormLabel>\r\n                    //             <Input placeholder=\"zip\" \r\n                    //             value={data.zip}\r\n                    //             name='zip'\r\n                    //             onChange={(event) => handleChange(event)}\r\n                    //             />\r\n                    //         </FormControl>\r\n                           \r\n                               \r\n                    //         </ModalBody>\r\n                    //         <ModalFooter>\r\n                    //         <Input mt='2' mb='2'  type=\"submit\" value='Update' className='btn btn-block' bg=\"teal.400\" color='white' onClick={onClose} />\r\n                    //             {/* <Button colorScheme=\"green\"  onClick={trigger} >Update</Button>                               */}\r\n                    //         </ModalFooter>\r\n                    //     </form>\r\n                    //     </ModalContent>\r\n                    // </Modal> */}\r\n\r\n    ","F:\\DB_Project\\Front-end-react\\src\\components\\BankCard.js",["242","243","244","245","246","247","248","249","250"],"import {React, useState} from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    GridItem,\r\n    useColorMode,\r\n    useDisclosure,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    PopoverFooter,\r\n    PopoverArrow,\r\n    PopoverCloseButton,\r\n    ButtonGroup,\r\n    Heading,\r\n    HStack,\r\n    Spacer,\r\n    Image\r\n  } from \"@chakra-ui/react\";\r\n\r\nimport { ImUser,ImPhone, ImLocation } from \"react-icons/im\";\r\n\r\n\r\nconst BankCard = ({bankcard,deleteBankCard}) => {\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n\r\n    const { colorMode, toggleColorMode } = useColorMode();\r\n\r\n    \r\n\r\n    const [data, setData] = useState({\r\n        cardNumber:bankcard.card_number,\r\n        owner:bankcard.owner,\r\n        cvv:bankcard.cvv,\r\n        expDate:bankcard.expDate\r\n    })\r\n    \r\n\r\n    const handleChange =  (event) => {\r\n        var value = event.target.value;\r\n        var name = event.target.name;\r\n\r\n        setData({ ...data, [event.target.name]: value })\r\n        // console.log(data)\r\n    };\r\n\r\n\r\n    return(\r\n        <GridItem>\r\n        <Box  \r\n            bg={colorMode === \"light\" ? \"cyan.50\" : \"cyan.900\"}\r\n            borderRadius='md'\r\n            border='1px'\r\n            borderColor='cyan.600'\r\n            p='6'\r\n            m='4'\r\n            pb='3'\r\n           \r\n            >\r\n\r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n                    \r\n                    <Box\r\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"lg\"       \r\n                        ml=\"2\"\r\n                    >\r\n                       <Heading size='lg'> x x x x  x x x x {bankcard.cardNumber.toString().substr(8,13)} </Heading>\r\n                    </Box>\r\n                </Box> \r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n                \r\n                   \r\n                    <Box\r\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"md\"       \r\n                        ml=\"2\"\r\n                       \r\n                    >\r\n                        { bankcard.owner }\r\n                    </Box>\r\n                </Box> \r\n               \r\n               <HStack mb='4'>\r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n                \r\n                    <Box\r\n                        color={colorMode === \"light\" ? \"cyan.900\" : \"cyan.50\"}\r\n                        letterSpacing=\"wide\"\r\n                        fontSize=\"md\"       \r\n                        ml=\"2\"\r\n                    >\r\n                        {bankcard.expDate}\r\n                    </Box>\r\n                </Box> \r\n                <Spacer />\r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n                <Image\r\n                    width='70px'\r\n                    src=\"../visa.png\"\r\n                    />\r\n                </Box> \r\n                </HStack>\r\n\r\n                <Box d=\"flex\" alignItems=\"baseline\" m='2'>\r\n\r\n                 \r\n                    {/* Delete Address */}\r\n                \r\n                    <Popover>\r\n                        <PopoverTrigger>\r\n                        <Button colorScheme=\"red\" size=\"xs\"  > Delete</Button> \r\n                        </PopoverTrigger>\r\n                        <PopoverContent>\r\n                            <PopoverHeader fontWeight=\"semibold\">Delete Card Details</PopoverHeader>\r\n                            <PopoverArrow />\r\n                            <PopoverCloseButton />\r\n                            <PopoverBody>\r\n                            Are you sure you want to delete card details?\r\n                            </PopoverBody>\r\n                            <PopoverFooter d=\"flex\" justifyContent=\"flex-end\">\r\n                                <ButtonGroup size=\"sm\">\r\n                                    <Button colorScheme=\"red\" onClick={()=>{deleteBankCard(bankcard.cardNumber)}}>Delete</Button>\r\n                                </ButtonGroup>\r\n                            </PopoverFooter>\r\n                            </PopoverContent>\r\n                            </Popover>                   \r\n                </Box>\r\n\r\n        </Box>\r\n        </GridItem>\r\n    )\r\n}\r\n\r\nexport default BankCard\r\n\r\n\r\n\r\n    ",{"ruleId":"251","replacedBy":"252"},{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","severity":1,"message":"256","line":27,"column":9,"nodeType":"257","messageId":"258","endLine":27,"endColumn":11},{"ruleId":"255","severity":1,"message":"259","line":28,"column":11,"nodeType":"257","messageId":"258","endLine":28,"endColumn":20},{"ruleId":"255","severity":1,"message":"260","line":28,"column":22,"nodeType":"257","messageId":"258","endLine":28,"endColumn":37},{"ruleId":"255","severity":1,"message":"261","line":40,"column":16,"nodeType":"257","messageId":"258","endLine":40,"endColumn":23},{"ruleId":"255","severity":1,"message":"262","line":24,"column":3,"nodeType":"257","messageId":"258","endLine":24,"endColumn":9},{"ruleId":"255","severity":1,"message":"263","line":30,"column":10,"nodeType":"257","messageId":"258","endLine":30,"endColumn":20},{"ruleId":"255","severity":1,"message":"260","line":38,"column":22,"nodeType":"257","messageId":"258","endLine":38,"endColumn":37},{"ruleId":"255","severity":1,"message":"264","line":40,"column":21,"nodeType":"257","messageId":"258","endLine":40,"endColumn":33},{"ruleId":"255","severity":1,"message":"265","line":76,"column":27,"nodeType":"257","messageId":"258","endLine":76,"endColumn":45},{"ruleId":"255","severity":1,"message":"266","line":100,"column":16,"nodeType":"257","messageId":"258","endLine":100,"endColumn":23},{"ruleId":"255","severity":1,"message":"267","line":133,"column":9,"nodeType":"257","messageId":"258","endLine":133,"endColumn":20},{"ruleId":"255","severity":1,"message":"268","line":9,"column":3,"nodeType":"257","messageId":"258","endLine":9,"endColumn":15},{"ruleId":"255","severity":1,"message":"269","line":12,"column":18,"nodeType":"257","messageId":"258","endLine":12,"endColumn":29},{"ruleId":"255","severity":1,"message":"270","line":13,"column":17,"nodeType":"257","messageId":"258","endLine":13,"endColumn":23},{"ruleId":"255","severity":1,"message":"262","line":13,"column":25,"nodeType":"257","messageId":"258","endLine":13,"endColumn":31},{"ruleId":"255","severity":1,"message":"271","line":18,"column":3,"nodeType":"257","messageId":"258","endLine":18,"endColumn":10},{"ruleId":"255","severity":1,"message":"272","line":19,"column":3,"nodeType":"257","messageId":"258","endLine":19,"endColumn":12},{"ruleId":"255","severity":1,"message":"273","line":23,"column":8,"nodeType":"257","messageId":"258","endLine":23,"endColumn":32},{"ruleId":"255","severity":1,"message":"274","line":24,"column":8,"nodeType":"257","messageId":"258","endLine":24,"endColumn":26},{"ruleId":"255","severity":1,"message":"256","line":28,"column":9,"nodeType":"257","messageId":"258","endLine":28,"endColumn":11},{"ruleId":"255","severity":1,"message":"261","line":32,"column":16,"nodeType":"257","messageId":"258","endLine":32,"endColumn":23},{"ruleId":"255","severity":1,"message":"275","line":17,"column":22,"nodeType":"257","messageId":"258","endLine":17,"endColumn":35},{"ruleId":"255","severity":1,"message":"260","line":26,"column":22,"nodeType":"257","messageId":"258","endLine":26,"endColumn":37},{"ruleId":"255","severity":1,"message":"276","line":28,"column":34,"nodeType":"257","messageId":"258","endLine":28,"endColumn":59},{"ruleId":"255","severity":1,"message":"277","line":3,"column":5,"nodeType":"257","messageId":"258","endLine":3,"endColumn":11},{"ruleId":"255","severity":1,"message":"271","line":11,"column":10,"nodeType":"257","messageId":"258","endLine":11,"endColumn":17},{"ruleId":"255","severity":1,"message":"272","line":11,"column":19,"nodeType":"257","messageId":"258","endLine":11,"endColumn":28},{"ruleId":"255","severity":1,"message":"278","line":11,"column":48,"nodeType":"257","messageId":"258","endLine":11,"endColumn":56},{"ruleId":"255","severity":1,"message":"269","line":13,"column":18,"nodeType":"257","messageId":"258","endLine":13,"endColumn":29},{"ruleId":"255","severity":1,"message":"279","line":17,"column":5,"nodeType":"257","messageId":"258","endLine":17,"endColumn":21},{"ruleId":"255","severity":1,"message":"280","line":18,"column":5,"nodeType":"257","messageId":"258","endLine":18,"endColumn":19},{"ruleId":"255","severity":1,"message":"281","line":20,"column":17,"nodeType":"257","messageId":"258","endLine":20,"endColumn":25},{"ruleId":"255","severity":1,"message":"282","line":21,"column":18,"nodeType":"257","messageId":"258","endLine":21,"endColumn":29},{"ruleId":"255","severity":1,"message":"283","line":21,"column":31,"nodeType":"257","messageId":"258","endLine":21,"endColumn":42},{"ruleId":"255","severity":1,"message":"284","line":22,"column":8,"nodeType":"257","messageId":"258","endLine":22,"endColumn":17},{"ruleId":"255","severity":1,"message":"285","line":10,"column":5,"nodeType":"257","messageId":"258","endLine":10,"endColumn":9},{"ruleId":"255","severity":1,"message":"260","line":15,"column":24,"nodeType":"257","messageId":"258","endLine":15,"endColumn":39},{"ruleId":"255","severity":1,"message":"286","line":6,"column":5,"nodeType":"257","messageId":"258","endLine":6,"endColumn":12},{"ruleId":"255","severity":1,"message":"287","line":14,"column":10,"nodeType":"257","messageId":"258","endLine":14,"endColumn":19},{"ruleId":"255","severity":1,"message":"288","line":15,"column":8,"nodeType":"257","messageId":"258","endLine":15,"endColumn":14},{"ruleId":"255","severity":1,"message":"289","line":21,"column":22,"nodeType":"257","messageId":"258","endLine":21,"endColumn":33},{"ruleId":"255","severity":1,"message":"260","line":36,"column":24,"nodeType":"257","messageId":"258","endLine":36,"endColumn":39},{"ruleId":"255","severity":1,"message":"260","line":21,"column":24,"nodeType":"257","messageId":"258","endLine":21,"endColumn":39},{"ruleId":"290","severity":1,"message":"291","line":110,"column":37,"nodeType":"292","messageId":"293","endLine":110,"endColumn":39},{"ruleId":"255","severity":1,"message":"260","line":117,"column":24,"nodeType":"257","messageId":"258","endLine":117,"endColumn":39},{"ruleId":"255","severity":1,"message":"294","line":8,"column":5,"nodeType":"257","messageId":"258","endLine":8,"endColumn":18},{"ruleId":"255","severity":1,"message":"260","line":20,"column":24,"nodeType":"257","messageId":"258","endLine":20,"endColumn":39},{"ruleId":"255","severity":1,"message":"260","line":82,"column":24,"nodeType":"257","messageId":"258","endLine":82,"endColumn":39},{"ruleId":"255","severity":1,"message":"270","line":3,"column":3,"nodeType":"257","messageId":"258","endLine":3,"endColumn":9},{"ruleId":"255","severity":1,"message":"295","line":5,"column":3,"nodeType":"257","messageId":"258","endLine":5,"endColumn":9},{"ruleId":"255","severity":1,"message":"296","line":8,"column":3,"nodeType":"257","messageId":"258","endLine":8,"endColumn":10},{"ruleId":"255","severity":1,"message":"262","line":9,"column":3,"nodeType":"257","messageId":"258","endLine":9,"endColumn":9},{"ruleId":"255","severity":1,"message":"297","line":14,"column":8,"nodeType":"257","messageId":"258","endLine":14,"endColumn":14},{"ruleId":"255","severity":1,"message":"259","line":17,"column":11,"nodeType":"257","messageId":"258","endLine":17,"endColumn":20},{"ruleId":"255","severity":1,"message":"260","line":17,"column":22,"nodeType":"257","messageId":"258","endLine":17,"endColumn":37},{"ruleId":"255","severity":1,"message":"298","line":18,"column":7,"nodeType":"257","messageId":"258","endLine":18,"endColumn":14},{"ruleId":"255","severity":1,"message":"260","line":14,"column":22,"nodeType":"257","messageId":"258","endLine":14,"endColumn":37},{"ruleId":"255","severity":1,"message":"268","line":5,"column":3,"nodeType":"257","messageId":"258","endLine":5,"endColumn":15},{"ruleId":"255","severity":1,"message":"295","line":6,"column":3,"nodeType":"257","messageId":"258","endLine":6,"endColumn":9},{"ruleId":"255","severity":1,"message":"282","line":7,"column":3,"nodeType":"257","messageId":"258","endLine":7,"endColumn":14},{"ruleId":"255","severity":1,"message":"270","line":8,"column":3,"nodeType":"257","messageId":"258","endLine":8,"endColumn":9},{"ruleId":"255","severity":1,"message":"262","line":9,"column":3,"nodeType":"257","messageId":"258","endLine":9,"endColumn":9},{"ruleId":"255","severity":1,"message":"296","line":10,"column":3,"nodeType":"257","messageId":"258","endLine":10,"endColumn":10},{"ruleId":"255","severity":1,"message":"299","line":11,"column":3,"nodeType":"257","messageId":"258","endLine":11,"endColumn":8},{"ruleId":"255","severity":1,"message":"281","line":15,"column":17,"nodeType":"257","messageId":"258","endLine":15,"endColumn":25},{"ruleId":"255","severity":1,"message":"300","line":3,"column":5,"nodeType":"257","messageId":"258","endLine":3,"endColumn":9},{"ruleId":"255","severity":1,"message":"301","line":4,"column":5,"nodeType":"257","messageId":"258","endLine":4,"endColumn":13},{"ruleId":"255","severity":1,"message":"296","line":5,"column":5,"nodeType":"257","messageId":"258","endLine":5,"endColumn":12},{"ruleId":"255","severity":1,"message":"285","line":6,"column":5,"nodeType":"257","messageId":"258","endLine":6,"endColumn":9},{"ruleId":"255","severity":1,"message":"286","line":7,"column":5,"nodeType":"257","messageId":"258","endLine":7,"endColumn":12},{"ruleId":"255","severity":1,"message":"260","line":17,"column":24,"nodeType":"257","messageId":"258","endLine":17,"endColumn":39},{"ruleId":"290","severity":1,"message":"291","line":39,"column":42,"nodeType":"292","messageId":"293","endLine":39,"endColumn":44},{"ruleId":"255","severity":1,"message":"260","line":13,"column":22,"nodeType":"257","messageId":"258","endLine":13,"endColumn":37},{"ruleId":"255","severity":1,"message":"260","line":29,"column":24,"nodeType":"257","messageId":"258","endLine":29,"endColumn":39},{"ruleId":"290","severity":1,"message":"291","line":53,"column":18,"nodeType":"292","messageId":"293","endLine":53,"endColumn":20},{"ruleId":"290","severity":1,"message":"291","line":59,"column":24,"nodeType":"292","messageId":"293","endLine":59,"endColumn":26},{"ruleId":"255","severity":1,"message":"302","line":6,"column":5,"nodeType":"257","messageId":"258","endLine":6,"endColumn":10},{"ruleId":"255","severity":1,"message":"303","line":7,"column":5,"nodeType":"257","messageId":"258","endLine":7,"endColumn":17},{"ruleId":"255","severity":1,"message":"304","line":8,"column":5,"nodeType":"257","messageId":"258","endLine":8,"endColumn":17},{"ruleId":"255","severity":1,"message":"305","line":9,"column":5,"nodeType":"257","messageId":"258","endLine":9,"endColumn":16},{"ruleId":"255","severity":1,"message":"306","line":10,"column":5,"nodeType":"257","messageId":"258","endLine":10,"endColumn":16},{"ruleId":"255","severity":1,"message":"307","line":11,"column":5,"nodeType":"257","messageId":"258","endLine":11,"endColumn":14},{"ruleId":"255","severity":1,"message":"308","line":12,"column":5,"nodeType":"257","messageId":"258","endLine":12,"endColumn":21},{"ruleId":"255","severity":1,"message":"309","line":24,"column":5,"nodeType":"257","messageId":"258","endLine":24,"endColumn":16},{"ruleId":"255","severity":1,"message":"310","line":25,"column":5,"nodeType":"257","messageId":"258","endLine":25,"endColumn":14},{"ruleId":"255","severity":1,"message":"311","line":26,"column":5,"nodeType":"257","messageId":"258","endLine":26,"endColumn":10},{"ruleId":"255","severity":1,"message":"312","line":34,"column":13,"nodeType":"257","messageId":"258","endLine":34,"endColumn":19},{"ruleId":"255","severity":1,"message":"313","line":34,"column":21,"nodeType":"257","messageId":"258","endLine":34,"endColumn":27},{"ruleId":"255","severity":1,"message":"314","line":34,"column":29,"nodeType":"257","messageId":"258","endLine":34,"endColumn":36},{"ruleId":"255","severity":1,"message":"260","line":36,"column":24,"nodeType":"257","messageId":"258","endLine":36,"endColumn":39},{"ruleId":"255","severity":1,"message":"315","line":48,"column":11,"nodeType":"257","messageId":"258","endLine":48,"endColumn":23},{"ruleId":"255","severity":1,"message":"316","line":57,"column":11,"nodeType":"257","messageId":"258","endLine":57,"endColumn":23},{"ruleId":"255","severity":1,"message":"317","line":59,"column":13,"nodeType":"257","messageId":"258","endLine":59,"endColumn":17},{"ruleId":"318","severity":1,"message":"319","line":155,"column":21,"nodeType":"320","messageId":"321","endLine":160,"endColumn":39},{"ruleId":"255","severity":1,"message":"322","line":23,"column":10,"nodeType":"257","messageId":"258","endLine":23,"endColumn":16},{"ruleId":"255","severity":1,"message":"323","line":23,"column":17,"nodeType":"257","messageId":"258","endLine":23,"endColumn":24},{"ruleId":"255","severity":1,"message":"324","line":23,"column":26,"nodeType":"257","messageId":"258","endLine":23,"endColumn":36},{"ruleId":"255","severity":1,"message":"312","line":28,"column":13,"nodeType":"257","messageId":"258","endLine":28,"endColumn":19},{"ruleId":"255","severity":1,"message":"313","line":28,"column":21,"nodeType":"257","messageId":"258","endLine":28,"endColumn":27},{"ruleId":"255","severity":1,"message":"314","line":28,"column":29,"nodeType":"257","messageId":"258","endLine":28,"endColumn":36},{"ruleId":"255","severity":1,"message":"260","line":30,"column":24,"nodeType":"257","messageId":"258","endLine":30,"endColumn":39},{"ruleId":"255","severity":1,"message":"316","line":42,"column":11,"nodeType":"257","messageId":"258","endLine":42,"endColumn":23},{"ruleId":"255","severity":1,"message":"317","line":44,"column":13,"nodeType":"257","messageId":"258","endLine":44,"endColumn":17},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'colorMode' is assigned a value but never used.","'toggleColorMode' is assigned a value but never used.","'setData' is assigned a value but never used.","'VStack' is defined but never used.","'RiVisaLine' is defined but never used.","'setCartItems' is assigned a value but never used.","'setShippingAddress' is assigned a value but never used.","'setCard' is assigned a value but never used.","'customer_id' is assigned a value but never used.","'useColorMode' is defined but never used.","'ButtonGroup' is defined but never used.","'HStack' is defined but never used.","'AddIcon' is defined but never used.","'MinusIcon' is defined but never used.","'CategorizedReviewPreview' is defined but never used.","'ReviewCountPreview' is defined but never used.","'setCategories' is assigned a value but never used.","'setActiveCategoryProducts' is assigned a value but never used.","'Center' is defined but never used.","'StarIcon' is defined but never used.","'FormErrorMessage' is defined but never used.","'FormHelperText' is defined but never used.","'useState' is defined but never used.","'AvatarBadge' is defined but never used.","'AvatarGroup' is defined but never used.","'SearchBar' is defined but never used.","'Text' is defined but never used.","'Divider' is defined but never used.","'useParams' is defined but never used.","'Navbar' is defined but never used.","'setUserdata' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDisclosure' is defined but never used.","'Avatar' is defined but never used.","'Heading' is defined but never used.","'Replys' is defined but never used.","'reviews' is assigned a value but never used.","'Image' is defined but never used.","'Grid' is defined but never used.","'GridItem' is defined but never used.","'Modal' is defined but never used.","'ModalOverlay' is defined but never used.","'ModalContent' is defined but never used.","'ModalHeader' is defined but never used.","'ModalFooter' is defined but never used.","'ModalBody' is defined but never used.","'ModalCloseButton' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Input' is defined but never used.","'isOpen' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'onClose' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'name' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'ImUser' is defined but never used.","'ImPhone' is defined but never used.","'ImLocation' is defined but never used.","no-global-assign","no-unsafe-negation"]